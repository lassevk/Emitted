<#@ template language="C#" hostspecific="true" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Linq" #>
// This file autogenerated by opcodes.t4.tt
// Last generated: <#= DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") #>
// ReSharper disable InconsistentNaming

using System;
using System.Reflection;
using System.Reflection.Emit;

namespace Emitted;

public static partial class ILGeneratorExtensions
{
<#
    var opcodes = File.ReadAllLines(this.Host.ResolvePath("opcodes.txt")).Where(l => !string.IsNullOrWhiteSpace(l)).ToList();

    bool first = true;
    foreach (string line in opcodes)
    {
        if (!first)
        {
#>

<#
        }
        first = false;

        string opcode = line;
        int argIndex = opcode.IndexOf(':');
        string arg = "";
        if (argIndex > 0)
        {
            arg = opcode.Substring(argIndex + 1);
            opcode = opcode.Substring(0, argIndex);
        }

        string methodName = opcode.ToLowerInvariant();
        opcode = opcode.TrimStart('@');
        if (arg == "")
        {
#>
    /// <summary>
    /// Emits the opcode <see cref="OpCodes.<#= opcode #>"/>
    /// </summary>
    /// <param name="il">
    /// The <see cref="ILGenerator" /> to emit the opcode to.
    /// </param>
    /// <returns>
    /// The <see cref="ILGenerator"/> passed in through <paramref name="il"/>.
    /// </returns>
    public static ILGenerator <#= methodName #>(this ILGenerator il)
    {
        Guard.NotNull(il);
        il.Emit(OpCodes.<#= opcode #>);
        return il;
    }
<#
        }
        else
        {
#>
    /// <summary>
    /// Emits the opcode <see cref="OpCodes.<#= opcode #>"/>
    /// </summary>
    /// <param name="il">
    /// The <see cref="ILGenerator" /> to emit the opcode to.
    /// </param>
    /// <param name="value">
    /// The <see cref="<#= arg #>"/> value to emit with the opcode.
    /// </param>
    /// <returns>
    /// The <see cref="ILGenerator"/> passed in through <paramref name="il"/>.
    /// </returns>
    public static ILGenerator <#= methodName #>(this ILGenerator il, <#= arg #> value)
    {
        Guard.NotNull(il);
        il.Emit(OpCodes.<#= opcode #>, value);
        return il;
    }
<#
        }
    }
#>
}
// This file autogenerated by opcodes.t4.tt
// Last generated: 2024-11-06 13:45:26
// ReSharper disable InconsistentNaming

using System;
using System.CodeDom.Compiler;
using System.Reflection;
using System.Reflection.Emit;

namespace Emitted;

public static partial class ILGeneratorExtensions
{
    /// <summary>
    /// Emits the opcode <see cref="OpCodes.Ldnull"/>
    /// </summary>
    /// <param name="il">
    /// The <see cref="ILGenerator" /> to emit the opcode to.
    /// </param>
    /// <returns>
    /// The <see cref="ILGenerator"/> passed in through <paramref name="il"/>.
    /// </returns>
    [GeneratedCode("opcodes.t4.tt", null)]
    public static ILGenerator ldnull(this ILGenerator il)
    {
        Guard.NotNull(il);
        il.Emit(OpCodes.Ldnull);
        return il;
    }

    /// <summary>
    /// Emits the opcode <see cref="OpCodes.Add"/>
    /// </summary>
    /// <param name="il">
    /// The <see cref="ILGenerator" /> to emit the opcode to.
    /// </param>
    /// <returns>
    /// The <see cref="ILGenerator"/> passed in through <paramref name="il"/>.
    /// </returns>
    [GeneratedCode("opcodes.t4.tt", null)]
    public static ILGenerator add(this ILGenerator il)
    {
        Guard.NotNull(il);
        il.Emit(OpCodes.Add);
        return il;
    }

    /// <summary>
    /// Emits the opcode <see cref="OpCodes.Add_Ovf"/>
    /// </summary>
    /// <param name="il">
    /// The <see cref="ILGenerator" /> to emit the opcode to.
    /// </param>
    /// <returns>
    /// The <see cref="ILGenerator"/> passed in through <paramref name="il"/>.
    /// </returns>
    [GeneratedCode("opcodes.t4.tt", null)]
    public static ILGenerator add_ovf(this ILGenerator il)
    {
        Guard.NotNull(il);
        il.Emit(OpCodes.Add_Ovf);
        return il;
    }

    /// <summary>
    /// Emits the opcode <see cref="OpCodes.Add_Ovf_Un"/>
    /// </summary>
    /// <param name="il">
    /// The <see cref="ILGenerator" /> to emit the opcode to.
    /// </param>
    /// <returns>
    /// The <see cref="ILGenerator"/> passed in through <paramref name="il"/>.
    /// </returns>
    [GeneratedCode("opcodes.t4.tt", null)]
    public static ILGenerator add_ovf_un(this ILGenerator il)
    {
        Guard.NotNull(il);
        il.Emit(OpCodes.Add_Ovf_Un);
        return il;
    }

    /// <summary>
    /// Emits the opcode <see cref="OpCodes.Sub"/>
    /// </summary>
    /// <param name="il">
    /// The <see cref="ILGenerator" /> to emit the opcode to.
    /// </param>
    /// <returns>
    /// The <see cref="ILGenerator"/> passed in through <paramref name="il"/>.
    /// </returns>
    [GeneratedCode("opcodes.t4.tt", null)]
    public static ILGenerator sub(this ILGenerator il)
    {
        Guard.NotNull(il);
        il.Emit(OpCodes.Sub);
        return il;
    }

    /// <summary>
    /// Emits the opcode <see cref="OpCodes.Sub_Ovf"/>
    /// </summary>
    /// <param name="il">
    /// The <see cref="ILGenerator" /> to emit the opcode to.
    /// </param>
    /// <returns>
    /// The <see cref="ILGenerator"/> passed in through <paramref name="il"/>.
    /// </returns>
    [GeneratedCode("opcodes.t4.tt", null)]
    public static ILGenerator sub_ovf(this ILGenerator il)
    {
        Guard.NotNull(il);
        il.Emit(OpCodes.Sub_Ovf);
        return il;
    }

    /// <summary>
    /// Emits the opcode <see cref="OpCodes.Sub_Ovf_Un"/>
    /// </summary>
    /// <param name="il">
    /// The <see cref="ILGenerator" /> to emit the opcode to.
    /// </param>
    /// <returns>
    /// The <see cref="ILGenerator"/> passed in through <paramref name="il"/>.
    /// </returns>
    [GeneratedCode("opcodes.t4.tt", null)]
    public static ILGenerator sub_ovf_un(this ILGenerator il)
    {
        Guard.NotNull(il);
        il.Emit(OpCodes.Sub_Ovf_Un);
        return il;
    }

    /// <summary>
    /// Emits the opcode <see cref="OpCodes.Div"/>
    /// </summary>
    /// <param name="il">
    /// The <see cref="ILGenerator" /> to emit the opcode to.
    /// </param>
    /// <returns>
    /// The <see cref="ILGenerator"/> passed in through <paramref name="il"/>.
    /// </returns>
    [GeneratedCode("opcodes.t4.tt", null)]
    public static ILGenerator div(this ILGenerator il)
    {
        Guard.NotNull(il);
        il.Emit(OpCodes.Div);
        return il;
    }

    /// <summary>
    /// Emits the opcode <see cref="OpCodes.Div_Un"/>
    /// </summary>
    /// <param name="il">
    /// The <see cref="ILGenerator" /> to emit the opcode to.
    /// </param>
    /// <returns>
    /// The <see cref="ILGenerator"/> passed in through <paramref name="il"/>.
    /// </returns>
    [GeneratedCode("opcodes.t4.tt", null)]
    public static ILGenerator div_un(this ILGenerator il)
    {
        Guard.NotNull(il);
        il.Emit(OpCodes.Div_Un);
        return il;
    }

    /// <summary>
    /// Emits the opcode <see cref="OpCodes.Rem"/>
    /// </summary>
    /// <param name="il">
    /// The <see cref="ILGenerator" /> to emit the opcode to.
    /// </param>
    /// <returns>
    /// The <see cref="ILGenerator"/> passed in through <paramref name="il"/>.
    /// </returns>
    [GeneratedCode("opcodes.t4.tt", null)]
    public static ILGenerator rem(this ILGenerator il)
    {
        Guard.NotNull(il);
        il.Emit(OpCodes.Rem);
        return il;
    }

    /// <summary>
    /// Emits the opcode <see cref="OpCodes.Rem_Un"/>
    /// </summary>
    /// <param name="il">
    /// The <see cref="ILGenerator" /> to emit the opcode to.
    /// </param>
    /// <returns>
    /// The <see cref="ILGenerator"/> passed in through <paramref name="il"/>.
    /// </returns>
    [GeneratedCode("opcodes.t4.tt", null)]
    public static ILGenerator rem_un(this ILGenerator il)
    {
        Guard.NotNull(il);
        il.Emit(OpCodes.Rem_Un);
        return il;
    }

    /// <summary>
    /// Emits the opcode <see cref="OpCodes.Mul"/>
    /// </summary>
    /// <param name="il">
    /// The <see cref="ILGenerator" /> to emit the opcode to.
    /// </param>
    /// <returns>
    /// The <see cref="ILGenerator"/> passed in through <paramref name="il"/>.
    /// </returns>
    [GeneratedCode("opcodes.t4.tt", null)]
    public static ILGenerator mul(this ILGenerator il)
    {
        Guard.NotNull(il);
        il.Emit(OpCodes.Mul);
        return il;
    }

    /// <summary>
    /// Emits the opcode <see cref="OpCodes.Mul_Ovf"/>
    /// </summary>
    /// <param name="il">
    /// The <see cref="ILGenerator" /> to emit the opcode to.
    /// </param>
    /// <returns>
    /// The <see cref="ILGenerator"/> passed in through <paramref name="il"/>.
    /// </returns>
    [GeneratedCode("opcodes.t4.tt", null)]
    public static ILGenerator mul_ovf(this ILGenerator il)
    {
        Guard.NotNull(il);
        il.Emit(OpCodes.Mul_Ovf);
        return il;
    }

    /// <summary>
    /// Emits the opcode <see cref="OpCodes.Mul_Ovf_Un"/>
    /// </summary>
    /// <param name="il">
    /// The <see cref="ILGenerator" /> to emit the opcode to.
    /// </param>
    /// <returns>
    /// The <see cref="ILGenerator"/> passed in through <paramref name="il"/>.
    /// </returns>
    [GeneratedCode("opcodes.t4.tt", null)]
    public static ILGenerator mul_ovf_un(this ILGenerator il)
    {
        Guard.NotNull(il);
        il.Emit(OpCodes.Mul_Ovf_Un);
        return il;
    }

    /// <summary>
    /// Emits the opcode <see cref="OpCodes.Neg"/>
    /// </summary>
    /// <param name="il">
    /// The <see cref="ILGenerator" /> to emit the opcode to.
    /// </param>
    /// <returns>
    /// The <see cref="ILGenerator"/> passed in through <paramref name="il"/>.
    /// </returns>
    [GeneratedCode("opcodes.t4.tt", null)]
    public static ILGenerator neg(this ILGenerator il)
    {
        Guard.NotNull(il);
        il.Emit(OpCodes.Neg);
        return il;
    }

    /// <summary>
    /// Emits the opcode <see cref="OpCodes.And"/>
    /// </summary>
    /// <param name="il">
    /// The <see cref="ILGenerator" /> to emit the opcode to.
    /// </param>
    /// <returns>
    /// The <see cref="ILGenerator"/> passed in through <paramref name="il"/>.
    /// </returns>
    [GeneratedCode("opcodes.t4.tt", null)]
    public static ILGenerator and(this ILGenerator il)
    {
        Guard.NotNull(il);
        il.Emit(OpCodes.And);
        return il;
    }

    /// <summary>
    /// Emits the opcode <see cref="OpCodes.Not"/>
    /// </summary>
    /// <param name="il">
    /// The <see cref="ILGenerator" /> to emit the opcode to.
    /// </param>
    /// <returns>
    /// The <see cref="ILGenerator"/> passed in through <paramref name="il"/>.
    /// </returns>
    [GeneratedCode("opcodes.t4.tt", null)]
    public static ILGenerator not(this ILGenerator il)
    {
        Guard.NotNull(il);
        il.Emit(OpCodes.Not);
        return il;
    }

    /// <summary>
    /// Emits the opcode <see cref="OpCodes.Or"/>
    /// </summary>
    /// <param name="il">
    /// The <see cref="ILGenerator" /> to emit the opcode to.
    /// </param>
    /// <returns>
    /// The <see cref="ILGenerator"/> passed in through <paramref name="il"/>.
    /// </returns>
    [GeneratedCode("opcodes.t4.tt", null)]
    public static ILGenerator or(this ILGenerator il)
    {
        Guard.NotNull(il);
        il.Emit(OpCodes.Or);
        return il;
    }

    /// <summary>
    /// Emits the opcode <see cref="OpCodes.Xor"/>
    /// </summary>
    /// <param name="il">
    /// The <see cref="ILGenerator" /> to emit the opcode to.
    /// </param>
    /// <returns>
    /// The <see cref="ILGenerator"/> passed in through <paramref name="il"/>.
    /// </returns>
    [GeneratedCode("opcodes.t4.tt", null)]
    public static ILGenerator xor(this ILGenerator il)
    {
        Guard.NotNull(il);
        il.Emit(OpCodes.Xor);
        return il;
    }

    /// <summary>
    /// Emits the opcode <see cref="OpCodes.Shl"/>
    /// </summary>
    /// <param name="il">
    /// The <see cref="ILGenerator" /> to emit the opcode to.
    /// </param>
    /// <returns>
    /// The <see cref="ILGenerator"/> passed in through <paramref name="il"/>.
    /// </returns>
    [GeneratedCode("opcodes.t4.tt", null)]
    public static ILGenerator shl(this ILGenerator il)
    {
        Guard.NotNull(il);
        il.Emit(OpCodes.Shl);
        return il;
    }

    /// <summary>
    /// Emits the opcode <see cref="OpCodes.Shr"/>
    /// </summary>
    /// <param name="il">
    /// The <see cref="ILGenerator" /> to emit the opcode to.
    /// </param>
    /// <returns>
    /// The <see cref="ILGenerator"/> passed in through <paramref name="il"/>.
    /// </returns>
    [GeneratedCode("opcodes.t4.tt", null)]
    public static ILGenerator shr(this ILGenerator il)
    {
        Guard.NotNull(il);
        il.Emit(OpCodes.Shr);
        return il;
    }

    /// <summary>
    /// Emits the opcode <see cref="OpCodes.Shr_Un"/>
    /// </summary>
    /// <param name="il">
    /// The <see cref="ILGenerator" /> to emit the opcode to.
    /// </param>
    /// <returns>
    /// The <see cref="ILGenerator"/> passed in through <paramref name="il"/>.
    /// </returns>
    [GeneratedCode("opcodes.t4.tt", null)]
    public static ILGenerator shr_un(this ILGenerator il)
    {
        Guard.NotNull(il);
        il.Emit(OpCodes.Shr_Un);
        return il;
    }

    /// <summary>
    /// Emits the opcode <see cref="OpCodes.Arglist"/>
    /// </summary>
    /// <param name="il">
    /// The <see cref="ILGenerator" /> to emit the opcode to.
    /// </param>
    /// <returns>
    /// The <see cref="ILGenerator"/> passed in through <paramref name="il"/>.
    /// </returns>
    [GeneratedCode("opcodes.t4.tt", null)]
    public static ILGenerator arglist(this ILGenerator il)
    {
        Guard.NotNull(il);
        il.Emit(OpCodes.Arglist);
        return il;
    }

    /// <summary>
    /// Emits the opcode <see cref="OpCodes.Box"/>
    /// </summary>
    /// <param name="il">
    /// The <see cref="ILGenerator" /> to emit the opcode to.
    /// </param>
    /// <param name="value">
    /// The <see cref="Type"/> value to emit with the opcode.
    /// </param>
    /// <returns>
    /// The <see cref="ILGenerator"/> passed in through <paramref name="il"/>.
    /// </returns>
    [GeneratedCode("opcodes.t4.tt", null)]
    public static ILGenerator box(this ILGenerator il, Type value)
    {
        Guard.NotNull(il);
        il.Emit(OpCodes.Box, value);
        return il;
    }

    /// <summary>
    /// Emits the opcode <see cref="OpCodes.Unbox"/>
    /// </summary>
    /// <param name="il">
    /// The <see cref="ILGenerator" /> to emit the opcode to.
    /// </param>
    /// <param name="value">
    /// The <see cref="Type"/> value to emit with the opcode.
    /// </param>
    /// <returns>
    /// The <see cref="ILGenerator"/> passed in through <paramref name="il"/>.
    /// </returns>
    [GeneratedCode("opcodes.t4.tt", null)]
    public static ILGenerator unbox(this ILGenerator il, Type value)
    {
        Guard.NotNull(il);
        il.Emit(OpCodes.Unbox, value);
        return il;
    }

    /// <summary>
    /// Emits the opcode <see cref="OpCodes.Unbox_Any"/>
    /// </summary>
    /// <param name="il">
    /// The <see cref="ILGenerator" /> to emit the opcode to.
    /// </param>
    /// <param name="value">
    /// The <see cref="Type"/> value to emit with the opcode.
    /// </param>
    /// <returns>
    /// The <see cref="ILGenerator"/> passed in through <paramref name="il"/>.
    /// </returns>
    [GeneratedCode("opcodes.t4.tt", null)]
    public static ILGenerator unbox_any(this ILGenerator il, Type value)
    {
        Guard.NotNull(il);
        il.Emit(OpCodes.Unbox_Any, value);
        return il;
    }

    /// <summary>
    /// Emits the opcode <see cref="OpCodes.Constrained"/>
    /// </summary>
    /// <param name="il">
    /// The <see cref="ILGenerator" /> to emit the opcode to.
    /// </param>
    /// <param name="value">
    /// The <see cref="Type"/> value to emit with the opcode.
    /// </param>
    /// <returns>
    /// The <see cref="ILGenerator"/> passed in through <paramref name="il"/>.
    /// </returns>
    [GeneratedCode("opcodes.t4.tt", null)]
    public static ILGenerator constrained(this ILGenerator il, Type value)
    {
        Guard.NotNull(il);
        il.Emit(OpCodes.Constrained, value);
        return il;
    }

    /// <summary>
    /// Emits the opcode <see cref="OpCodes.Castclass"/>
    /// </summary>
    /// <param name="il">
    /// The <see cref="ILGenerator" /> to emit the opcode to.
    /// </param>
    /// <param name="value">
    /// The <see cref="Type"/> value to emit with the opcode.
    /// </param>
    /// <returns>
    /// The <see cref="ILGenerator"/> passed in through <paramref name="il"/>.
    /// </returns>
    [GeneratedCode("opcodes.t4.tt", null)]
    public static ILGenerator castclass(this ILGenerator il, Type value)
    {
        Guard.NotNull(il);
        il.Emit(OpCodes.Castclass, value);
        return il;
    }

    /// <summary>
    /// Emits the opcode <see cref="OpCodes.Volatile"/>
    /// </summary>
    /// <param name="il">
    /// The <see cref="ILGenerator" /> to emit the opcode to.
    /// </param>
    /// <returns>
    /// The <see cref="ILGenerator"/> passed in through <paramref name="il"/>.
    /// </returns>
    [GeneratedCode("opcodes.t4.tt", null)]
    public static ILGenerator @volatile(this ILGenerator il)
    {
        Guard.NotNull(il);
        il.Emit(OpCodes.Volatile);
        return il;
    }

    /// <summary>
    /// Emits the opcode <see cref="OpCodes.Dup"/>
    /// </summary>
    /// <param name="il">
    /// The <see cref="ILGenerator" /> to emit the opcode to.
    /// </param>
    /// <returns>
    /// The <see cref="ILGenerator"/> passed in through <paramref name="il"/>.
    /// </returns>
    [GeneratedCode("opcodes.t4.tt", null)]
    public static ILGenerator dup(this ILGenerator il)
    {
        Guard.NotNull(il);
        il.Emit(OpCodes.Dup);
        return il;
    }

    /// <summary>
    /// Emits the opcode <see cref="OpCodes.Pop"/>
    /// </summary>
    /// <param name="il">
    /// The <see cref="ILGenerator" /> to emit the opcode to.
    /// </param>
    /// <returns>
    /// The <see cref="ILGenerator"/> passed in through <paramref name="il"/>.
    /// </returns>
    [GeneratedCode("opcodes.t4.tt", null)]
    public static ILGenerator pop(this ILGenerator il)
    {
        Guard.NotNull(il);
        il.Emit(OpCodes.Pop);
        return il;
    }

    /// <summary>
    /// Emits the opcode <see cref="OpCodes.Nop"/>
    /// </summary>
    /// <param name="il">
    /// The <see cref="ILGenerator" /> to emit the opcode to.
    /// </param>
    /// <returns>
    /// The <see cref="ILGenerator"/> passed in through <paramref name="il"/>.
    /// </returns>
    [GeneratedCode("opcodes.t4.tt", null)]
    public static ILGenerator nop(this ILGenerator il)
    {
        Guard.NotNull(il);
        il.Emit(OpCodes.Nop);
        return il;
    }

    /// <summary>
    /// Emits the opcode <see cref="OpCodes.Rethrow"/>
    /// </summary>
    /// <param name="il">
    /// The <see cref="ILGenerator" /> to emit the opcode to.
    /// </param>
    /// <returns>
    /// The <see cref="ILGenerator"/> passed in through <paramref name="il"/>.
    /// </returns>
    [GeneratedCode("opcodes.t4.tt", null)]
    public static ILGenerator rethrow(this ILGenerator il)
    {
        Guard.NotNull(il);
        il.Emit(OpCodes.Rethrow);
        return il;
    }

    /// <summary>
    /// Emits the opcode <see cref="OpCodes.Endfilter"/>
    /// </summary>
    /// <param name="il">
    /// The <see cref="ILGenerator" /> to emit the opcode to.
    /// </param>
    /// <returns>
    /// The <see cref="ILGenerator"/> passed in through <paramref name="il"/>.
    /// </returns>
    [GeneratedCode("opcodes.t4.tt", null)]
    public static ILGenerator endfilter(this ILGenerator il)
    {
        Guard.NotNull(il);
        il.Emit(OpCodes.Endfilter);
        return il;
    }

    /// <summary>
    /// Emits the opcode <see cref="OpCodes.Endfinally"/>
    /// </summary>
    /// <param name="il">
    /// The <see cref="ILGenerator" /> to emit the opcode to.
    /// </param>
    /// <returns>
    /// The <see cref="ILGenerator"/> passed in through <paramref name="il"/>.
    /// </returns>
    [GeneratedCode("opcodes.t4.tt", null)]
    public static ILGenerator endfinally(this ILGenerator il)
    {
        Guard.NotNull(il);
        il.Emit(OpCodes.Endfinally);
        return il;
    }

    /// <summary>
    /// Emits the opcode <see cref="OpCodes.Initblk"/>
    /// </summary>
    /// <param name="il">
    /// The <see cref="ILGenerator" /> to emit the opcode to.
    /// </param>
    /// <returns>
    /// The <see cref="ILGenerator"/> passed in through <paramref name="il"/>.
    /// </returns>
    [GeneratedCode("opcodes.t4.tt", null)]
    public static ILGenerator initblk(this ILGenerator il)
    {
        Guard.NotNull(il);
        il.Emit(OpCodes.Initblk);
        return il;
    }

    /// <summary>
    /// Emits the opcode <see cref="OpCodes.Initobj"/>
    /// </summary>
    /// <param name="il">
    /// The <see cref="ILGenerator" /> to emit the opcode to.
    /// </param>
    /// <param name="value">
    /// The <see cref="Type"/> value to emit with the opcode.
    /// </param>
    /// <returns>
    /// The <see cref="ILGenerator"/> passed in through <paramref name="il"/>.
    /// </returns>
    [GeneratedCode("opcodes.t4.tt", null)]
    public static ILGenerator initobj(this ILGenerator il, Type value)
    {
        Guard.NotNull(il);
        il.Emit(OpCodes.Initobj, value);
        return il;
    }

    /// <summary>
    /// Emits the opcode <see cref="OpCodes.Isinst"/>
    /// </summary>
    /// <param name="il">
    /// The <see cref="ILGenerator" /> to emit the opcode to.
    /// </param>
    /// <param name="value">
    /// The <see cref="Type"/> value to emit with the opcode.
    /// </param>
    /// <returns>
    /// The <see cref="ILGenerator"/> passed in through <paramref name="il"/>.
    /// </returns>
    [GeneratedCode("opcodes.t4.tt", null)]
    public static ILGenerator isinst(this ILGenerator il, Type value)
    {
        Guard.NotNull(il);
        il.Emit(OpCodes.Isinst, value);
        return il;
    }

    /// <summary>
    /// Emits the opcode <see cref="OpCodes.Break"/>
    /// </summary>
    /// <param name="il">
    /// The <see cref="ILGenerator" /> to emit the opcode to.
    /// </param>
    /// <returns>
    /// The <see cref="ILGenerator"/> passed in through <paramref name="il"/>.
    /// </returns>
    [GeneratedCode("opcodes.t4.tt", null)]
    public static ILGenerator @break(this ILGenerator il)
    {
        Guard.NotNull(il);
        il.Emit(OpCodes.Break);
        return il;
    }

    /// <summary>
    /// Emits the opcode <see cref="OpCodes.Ceq"/>
    /// </summary>
    /// <param name="il">
    /// The <see cref="ILGenerator" /> to emit the opcode to.
    /// </param>
    /// <returns>
    /// The <see cref="ILGenerator"/> passed in through <paramref name="il"/>.
    /// </returns>
    [GeneratedCode("opcodes.t4.tt", null)]
    public static ILGenerator ceq(this ILGenerator il)
    {
        Guard.NotNull(il);
        il.Emit(OpCodes.Ceq);
        return il;
    }

    /// <summary>
    /// Emits the opcode <see cref="OpCodes.Cgt"/>
    /// </summary>
    /// <param name="il">
    /// The <see cref="ILGenerator" /> to emit the opcode to.
    /// </param>
    /// <returns>
    /// The <see cref="ILGenerator"/> passed in through <paramref name="il"/>.
    /// </returns>
    [GeneratedCode("opcodes.t4.tt", null)]
    public static ILGenerator cgt(this ILGenerator il)
    {
        Guard.NotNull(il);
        il.Emit(OpCodes.Cgt);
        return il;
    }

    /// <summary>
    /// Emits the opcode <see cref="OpCodes.Cgt_Un"/>
    /// </summary>
    /// <param name="il">
    /// The <see cref="ILGenerator" /> to emit the opcode to.
    /// </param>
    /// <returns>
    /// The <see cref="ILGenerator"/> passed in through <paramref name="il"/>.
    /// </returns>
    [GeneratedCode("opcodes.t4.tt", null)]
    public static ILGenerator cgt_un(this ILGenerator il)
    {
        Guard.NotNull(il);
        il.Emit(OpCodes.Cgt_Un);
        return il;
    }

    /// <summary>
    /// Emits the opcode <see cref="OpCodes.Ckfinite"/>
    /// </summary>
    /// <param name="il">
    /// The <see cref="ILGenerator" /> to emit the opcode to.
    /// </param>
    /// <returns>
    /// The <see cref="ILGenerator"/> passed in through <paramref name="il"/>.
    /// </returns>
    [GeneratedCode("opcodes.t4.tt", null)]
    public static ILGenerator ckfinite(this ILGenerator il)
    {
        Guard.NotNull(il);
        il.Emit(OpCodes.Ckfinite);
        return il;
    }

    /// <summary>
    /// Emits the opcode <see cref="OpCodes.Clt"/>
    /// </summary>
    /// <param name="il">
    /// The <see cref="ILGenerator" /> to emit the opcode to.
    /// </param>
    /// <returns>
    /// The <see cref="ILGenerator"/> passed in through <paramref name="il"/>.
    /// </returns>
    [GeneratedCode("opcodes.t4.tt", null)]
    public static ILGenerator clt(this ILGenerator il)
    {
        Guard.NotNull(il);
        il.Emit(OpCodes.Clt);
        return il;
    }

    /// <summary>
    /// Emits the opcode <see cref="OpCodes.Clt_Un"/>
    /// </summary>
    /// <param name="il">
    /// The <see cref="ILGenerator" /> to emit the opcode to.
    /// </param>
    /// <returns>
    /// The <see cref="ILGenerator"/> passed in through <paramref name="il"/>.
    /// </returns>
    [GeneratedCode("opcodes.t4.tt", null)]
    public static ILGenerator clt_un(this ILGenerator il)
    {
        Guard.NotNull(il);
        il.Emit(OpCodes.Clt_Un);
        return il;
    }

    /// <summary>
    /// Emits the opcode <see cref="OpCodes.Conv_I"/>
    /// </summary>
    /// <param name="il">
    /// The <see cref="ILGenerator" /> to emit the opcode to.
    /// </param>
    /// <returns>
    /// The <see cref="ILGenerator"/> passed in through <paramref name="il"/>.
    /// </returns>
    [GeneratedCode("opcodes.t4.tt", null)]
    public static ILGenerator conv_i(this ILGenerator il)
    {
        Guard.NotNull(il);
        il.Emit(OpCodes.Conv_I);
        return il;
    }

    /// <summary>
    /// Emits the opcode <see cref="OpCodes.Conv_I1"/>
    /// </summary>
    /// <param name="il">
    /// The <see cref="ILGenerator" /> to emit the opcode to.
    /// </param>
    /// <returns>
    /// The <see cref="ILGenerator"/> passed in through <paramref name="il"/>.
    /// </returns>
    [GeneratedCode("opcodes.t4.tt", null)]
    public static ILGenerator conv_i1(this ILGenerator il)
    {
        Guard.NotNull(il);
        il.Emit(OpCodes.Conv_I1);
        return il;
    }

    /// <summary>
    /// Emits the opcode <see cref="OpCodes.Conv_I2"/>
    /// </summary>
    /// <param name="il">
    /// The <see cref="ILGenerator" /> to emit the opcode to.
    /// </param>
    /// <returns>
    /// The <see cref="ILGenerator"/> passed in through <paramref name="il"/>.
    /// </returns>
    [GeneratedCode("opcodes.t4.tt", null)]
    public static ILGenerator conv_i2(this ILGenerator il)
    {
        Guard.NotNull(il);
        il.Emit(OpCodes.Conv_I2);
        return il;
    }

    /// <summary>
    /// Emits the opcode <see cref="OpCodes.Conv_I4"/>
    /// </summary>
    /// <param name="il">
    /// The <see cref="ILGenerator" /> to emit the opcode to.
    /// </param>
    /// <returns>
    /// The <see cref="ILGenerator"/> passed in through <paramref name="il"/>.
    /// </returns>
    [GeneratedCode("opcodes.t4.tt", null)]
    public static ILGenerator conv_i4(this ILGenerator il)
    {
        Guard.NotNull(il);
        il.Emit(OpCodes.Conv_I4);
        return il;
    }

    /// <summary>
    /// Emits the opcode <see cref="OpCodes.Conv_I8"/>
    /// </summary>
    /// <param name="il">
    /// The <see cref="ILGenerator" /> to emit the opcode to.
    /// </param>
    /// <returns>
    /// The <see cref="ILGenerator"/> passed in through <paramref name="il"/>.
    /// </returns>
    [GeneratedCode("opcodes.t4.tt", null)]
    public static ILGenerator conv_i8(this ILGenerator il)
    {
        Guard.NotNull(il);
        il.Emit(OpCodes.Conv_I8);
        return il;
    }

    /// <summary>
    /// Emits the opcode <see cref="OpCodes.Conv_Ovf_I"/>
    /// </summary>
    /// <param name="il">
    /// The <see cref="ILGenerator" /> to emit the opcode to.
    /// </param>
    /// <returns>
    /// The <see cref="ILGenerator"/> passed in through <paramref name="il"/>.
    /// </returns>
    [GeneratedCode("opcodes.t4.tt", null)]
    public static ILGenerator conv_ovf_i(this ILGenerator il)
    {
        Guard.NotNull(il);
        il.Emit(OpCodes.Conv_Ovf_I);
        return il;
    }

    /// <summary>
    /// Emits the opcode <see cref="OpCodes.Conv_Ovf_I_Un"/>
    /// </summary>
    /// <param name="il">
    /// The <see cref="ILGenerator" /> to emit the opcode to.
    /// </param>
    /// <returns>
    /// The <see cref="ILGenerator"/> passed in through <paramref name="il"/>.
    /// </returns>
    [GeneratedCode("opcodes.t4.tt", null)]
    public static ILGenerator conv_ovf_i_un(this ILGenerator il)
    {
        Guard.NotNull(il);
        il.Emit(OpCodes.Conv_Ovf_I_Un);
        return il;
    }

    /// <summary>
    /// Emits the opcode <see cref="OpCodes.Conv_Ovf_I1"/>
    /// </summary>
    /// <param name="il">
    /// The <see cref="ILGenerator" /> to emit the opcode to.
    /// </param>
    /// <returns>
    /// The <see cref="ILGenerator"/> passed in through <paramref name="il"/>.
    /// </returns>
    [GeneratedCode("opcodes.t4.tt", null)]
    public static ILGenerator conv_ovf_i1(this ILGenerator il)
    {
        Guard.NotNull(il);
        il.Emit(OpCodes.Conv_Ovf_I1);
        return il;
    }

    /// <summary>
    /// Emits the opcode <see cref="OpCodes.Conv_Ovf_I1_Un"/>
    /// </summary>
    /// <param name="il">
    /// The <see cref="ILGenerator" /> to emit the opcode to.
    /// </param>
    /// <returns>
    /// The <see cref="ILGenerator"/> passed in through <paramref name="il"/>.
    /// </returns>
    [GeneratedCode("opcodes.t4.tt", null)]
    public static ILGenerator conv_ovf_i1_un(this ILGenerator il)
    {
        Guard.NotNull(il);
        il.Emit(OpCodes.Conv_Ovf_I1_Un);
        return il;
    }

    /// <summary>
    /// Emits the opcode <see cref="OpCodes.Conv_Ovf_I2"/>
    /// </summary>
    /// <param name="il">
    /// The <see cref="ILGenerator" /> to emit the opcode to.
    /// </param>
    /// <returns>
    /// The <see cref="ILGenerator"/> passed in through <paramref name="il"/>.
    /// </returns>
    [GeneratedCode("opcodes.t4.tt", null)]
    public static ILGenerator conv_ovf_i2(this ILGenerator il)
    {
        Guard.NotNull(il);
        il.Emit(OpCodes.Conv_Ovf_I2);
        return il;
    }

    /// <summary>
    /// Emits the opcode <see cref="OpCodes.Conv_Ovf_I2_Un"/>
    /// </summary>
    /// <param name="il">
    /// The <see cref="ILGenerator" /> to emit the opcode to.
    /// </param>
    /// <returns>
    /// The <see cref="ILGenerator"/> passed in through <paramref name="il"/>.
    /// </returns>
    [GeneratedCode("opcodes.t4.tt", null)]
    public static ILGenerator conv_ovf_i2_un(this ILGenerator il)
    {
        Guard.NotNull(il);
        il.Emit(OpCodes.Conv_Ovf_I2_Un);
        return il;
    }

    /// <summary>
    /// Emits the opcode <see cref="OpCodes.Conv_Ovf_I4"/>
    /// </summary>
    /// <param name="il">
    /// The <see cref="ILGenerator" /> to emit the opcode to.
    /// </param>
    /// <returns>
    /// The <see cref="ILGenerator"/> passed in through <paramref name="il"/>.
    /// </returns>
    [GeneratedCode("opcodes.t4.tt", null)]
    public static ILGenerator conv_ovf_i4(this ILGenerator il)
    {
        Guard.NotNull(il);
        il.Emit(OpCodes.Conv_Ovf_I4);
        return il;
    }

    /// <summary>
    /// Emits the opcode <see cref="OpCodes.Conv_Ovf_I4_Un"/>
    /// </summary>
    /// <param name="il">
    /// The <see cref="ILGenerator" /> to emit the opcode to.
    /// </param>
    /// <returns>
    /// The <see cref="ILGenerator"/> passed in through <paramref name="il"/>.
    /// </returns>
    [GeneratedCode("opcodes.t4.tt", null)]
    public static ILGenerator conv_ovf_i4_un(this ILGenerator il)
    {
        Guard.NotNull(il);
        il.Emit(OpCodes.Conv_Ovf_I4_Un);
        return il;
    }

    /// <summary>
    /// Emits the opcode <see cref="OpCodes.Conv_Ovf_I8"/>
    /// </summary>
    /// <param name="il">
    /// The <see cref="ILGenerator" /> to emit the opcode to.
    /// </param>
    /// <returns>
    /// The <see cref="ILGenerator"/> passed in through <paramref name="il"/>.
    /// </returns>
    [GeneratedCode("opcodes.t4.tt", null)]
    public static ILGenerator conv_ovf_i8(this ILGenerator il)
    {
        Guard.NotNull(il);
        il.Emit(OpCodes.Conv_Ovf_I8);
        return il;
    }

    /// <summary>
    /// Emits the opcode <see cref="OpCodes.Conv_Ovf_I8_Un"/>
    /// </summary>
    /// <param name="il">
    /// The <see cref="ILGenerator" /> to emit the opcode to.
    /// </param>
    /// <returns>
    /// The <see cref="ILGenerator"/> passed in through <paramref name="il"/>.
    /// </returns>
    [GeneratedCode("opcodes.t4.tt", null)]
    public static ILGenerator conv_ovf_i8_un(this ILGenerator il)
    {
        Guard.NotNull(il);
        il.Emit(OpCodes.Conv_Ovf_I8_Un);
        return il;
    }

    /// <summary>
    /// Emits the opcode <see cref="OpCodes.Conv_R4"/>
    /// </summary>
    /// <param name="il">
    /// The <see cref="ILGenerator" /> to emit the opcode to.
    /// </param>
    /// <returns>
    /// The <see cref="ILGenerator"/> passed in through <paramref name="il"/>.
    /// </returns>
    [GeneratedCode("opcodes.t4.tt", null)]
    public static ILGenerator conv_r4(this ILGenerator il)
    {
        Guard.NotNull(il);
        il.Emit(OpCodes.Conv_R4);
        return il;
    }

    /// <summary>
    /// Emits the opcode <see cref="OpCodes.Conv_R8"/>
    /// </summary>
    /// <param name="il">
    /// The <see cref="ILGenerator" /> to emit the opcode to.
    /// </param>
    /// <returns>
    /// The <see cref="ILGenerator"/> passed in through <paramref name="il"/>.
    /// </returns>
    [GeneratedCode("opcodes.t4.tt", null)]
    public static ILGenerator conv_r8(this ILGenerator il)
    {
        Guard.NotNull(il);
        il.Emit(OpCodes.Conv_R8);
        return il;
    }

    /// <summary>
    /// Emits the opcode <see cref="OpCodes.Conv_R_Un"/>
    /// </summary>
    /// <param name="il">
    /// The <see cref="ILGenerator" /> to emit the opcode to.
    /// </param>
    /// <returns>
    /// The <see cref="ILGenerator"/> passed in through <paramref name="il"/>.
    /// </returns>
    [GeneratedCode("opcodes.t4.tt", null)]
    public static ILGenerator conv_r_un(this ILGenerator il)
    {
        Guard.NotNull(il);
        il.Emit(OpCodes.Conv_R_Un);
        return il;
    }

    /// <summary>
    /// Emits the opcode <see cref="OpCodes.Conv_U"/>
    /// </summary>
    /// <param name="il">
    /// The <see cref="ILGenerator" /> to emit the opcode to.
    /// </param>
    /// <returns>
    /// The <see cref="ILGenerator"/> passed in through <paramref name="il"/>.
    /// </returns>
    [GeneratedCode("opcodes.t4.tt", null)]
    public static ILGenerator conv_u(this ILGenerator il)
    {
        Guard.NotNull(il);
        il.Emit(OpCodes.Conv_U);
        return il;
    }

    /// <summary>
    /// Emits the opcode <see cref="OpCodes.Conv_U1"/>
    /// </summary>
    /// <param name="il">
    /// The <see cref="ILGenerator" /> to emit the opcode to.
    /// </param>
    /// <returns>
    /// The <see cref="ILGenerator"/> passed in through <paramref name="il"/>.
    /// </returns>
    [GeneratedCode("opcodes.t4.tt", null)]
    public static ILGenerator conv_u1(this ILGenerator il)
    {
        Guard.NotNull(il);
        il.Emit(OpCodes.Conv_U1);
        return il;
    }

    /// <summary>
    /// Emits the opcode <see cref="OpCodes.Conv_U2"/>
    /// </summary>
    /// <param name="il">
    /// The <see cref="ILGenerator" /> to emit the opcode to.
    /// </param>
    /// <returns>
    /// The <see cref="ILGenerator"/> passed in through <paramref name="il"/>.
    /// </returns>
    [GeneratedCode("opcodes.t4.tt", null)]
    public static ILGenerator conv_u2(this ILGenerator il)
    {
        Guard.NotNull(il);
        il.Emit(OpCodes.Conv_U2);
        return il;
    }

    /// <summary>
    /// Emits the opcode <see cref="OpCodes.Conv_U4"/>
    /// </summary>
    /// <param name="il">
    /// The <see cref="ILGenerator" /> to emit the opcode to.
    /// </param>
    /// <returns>
    /// The <see cref="ILGenerator"/> passed in through <paramref name="il"/>.
    /// </returns>
    [GeneratedCode("opcodes.t4.tt", null)]
    public static ILGenerator conv_u4(this ILGenerator il)
    {
        Guard.NotNull(il);
        il.Emit(OpCodes.Conv_U4);
        return il;
    }

    /// <summary>
    /// Emits the opcode <see cref="OpCodes.Conv_U8"/>
    /// </summary>
    /// <param name="il">
    /// The <see cref="ILGenerator" /> to emit the opcode to.
    /// </param>
    /// <returns>
    /// The <see cref="ILGenerator"/> passed in through <paramref name="il"/>.
    /// </returns>
    [GeneratedCode("opcodes.t4.tt", null)]
    public static ILGenerator conv_u8(this ILGenerator il)
    {
        Guard.NotNull(il);
        il.Emit(OpCodes.Conv_U8);
        return il;
    }

    /// <summary>
    /// Emits the opcode <see cref="OpCodes.Conv_Ovf_U"/>
    /// </summary>
    /// <param name="il">
    /// The <see cref="ILGenerator" /> to emit the opcode to.
    /// </param>
    /// <returns>
    /// The <see cref="ILGenerator"/> passed in through <paramref name="il"/>.
    /// </returns>
    [GeneratedCode("opcodes.t4.tt", null)]
    public static ILGenerator conv_ovf_u(this ILGenerator il)
    {
        Guard.NotNull(il);
        il.Emit(OpCodes.Conv_Ovf_U);
        return il;
    }

    /// <summary>
    /// Emits the opcode <see cref="OpCodes.Conv_Ovf_U_Un"/>
    /// </summary>
    /// <param name="il">
    /// The <see cref="ILGenerator" /> to emit the opcode to.
    /// </param>
    /// <returns>
    /// The <see cref="ILGenerator"/> passed in through <paramref name="il"/>.
    /// </returns>
    [GeneratedCode("opcodes.t4.tt", null)]
    public static ILGenerator conv_ovf_u_un(this ILGenerator il)
    {
        Guard.NotNull(il);
        il.Emit(OpCodes.Conv_Ovf_U_Un);
        return il;
    }

    /// <summary>
    /// Emits the opcode <see cref="OpCodes.Conv_Ovf_U1"/>
    /// </summary>
    /// <param name="il">
    /// The <see cref="ILGenerator" /> to emit the opcode to.
    /// </param>
    /// <returns>
    /// The <see cref="ILGenerator"/> passed in through <paramref name="il"/>.
    /// </returns>
    [GeneratedCode("opcodes.t4.tt", null)]
    public static ILGenerator conv_ovf_u1(this ILGenerator il)
    {
        Guard.NotNull(il);
        il.Emit(OpCodes.Conv_Ovf_U1);
        return il;
    }

    /// <summary>
    /// Emits the opcode <see cref="OpCodes.Conv_Ovf_U1_Un"/>
    /// </summary>
    /// <param name="il">
    /// The <see cref="ILGenerator" /> to emit the opcode to.
    /// </param>
    /// <returns>
    /// The <see cref="ILGenerator"/> passed in through <paramref name="il"/>.
    /// </returns>
    [GeneratedCode("opcodes.t4.tt", null)]
    public static ILGenerator conv_ovf_u1_un(this ILGenerator il)
    {
        Guard.NotNull(il);
        il.Emit(OpCodes.Conv_Ovf_U1_Un);
        return il;
    }

    /// <summary>
    /// Emits the opcode <see cref="OpCodes.Conv_Ovf_U2"/>
    /// </summary>
    /// <param name="il">
    /// The <see cref="ILGenerator" /> to emit the opcode to.
    /// </param>
    /// <returns>
    /// The <see cref="ILGenerator"/> passed in through <paramref name="il"/>.
    /// </returns>
    [GeneratedCode("opcodes.t4.tt", null)]
    public static ILGenerator conv_ovf_u2(this ILGenerator il)
    {
        Guard.NotNull(il);
        il.Emit(OpCodes.Conv_Ovf_U2);
        return il;
    }

    /// <summary>
    /// Emits the opcode <see cref="OpCodes.Conv_Ovf_U2_Un"/>
    /// </summary>
    /// <param name="il">
    /// The <see cref="ILGenerator" /> to emit the opcode to.
    /// </param>
    /// <returns>
    /// The <see cref="ILGenerator"/> passed in through <paramref name="il"/>.
    /// </returns>
    [GeneratedCode("opcodes.t4.tt", null)]
    public static ILGenerator conv_ovf_u2_un(this ILGenerator il)
    {
        Guard.NotNull(il);
        il.Emit(OpCodes.Conv_Ovf_U2_Un);
        return il;
    }

    /// <summary>
    /// Emits the opcode <see cref="OpCodes.Conv_Ovf_U4"/>
    /// </summary>
    /// <param name="il">
    /// The <see cref="ILGenerator" /> to emit the opcode to.
    /// </param>
    /// <returns>
    /// The <see cref="ILGenerator"/> passed in through <paramref name="il"/>.
    /// </returns>
    [GeneratedCode("opcodes.t4.tt", null)]
    public static ILGenerator conv_ovf_u4(this ILGenerator il)
    {
        Guard.NotNull(il);
        il.Emit(OpCodes.Conv_Ovf_U4);
        return il;
    }

    /// <summary>
    /// Emits the opcode <see cref="OpCodes.Conv_Ovf_U4_Un"/>
    /// </summary>
    /// <param name="il">
    /// The <see cref="ILGenerator" /> to emit the opcode to.
    /// </param>
    /// <returns>
    /// The <see cref="ILGenerator"/> passed in through <paramref name="il"/>.
    /// </returns>
    [GeneratedCode("opcodes.t4.tt", null)]
    public static ILGenerator conv_ovf_u4_un(this ILGenerator il)
    {
        Guard.NotNull(il);
        il.Emit(OpCodes.Conv_Ovf_U4_Un);
        return il;
    }

    /// <summary>
    /// Emits the opcode <see cref="OpCodes.Conv_Ovf_U8"/>
    /// </summary>
    /// <param name="il">
    /// The <see cref="ILGenerator" /> to emit the opcode to.
    /// </param>
    /// <returns>
    /// The <see cref="ILGenerator"/> passed in through <paramref name="il"/>.
    /// </returns>
    [GeneratedCode("opcodes.t4.tt", null)]
    public static ILGenerator conv_ovf_u8(this ILGenerator il)
    {
        Guard.NotNull(il);
        il.Emit(OpCodes.Conv_Ovf_U8);
        return il;
    }

    /// <summary>
    /// Emits the opcode <see cref="OpCodes.Conv_Ovf_U8_Un"/>
    /// </summary>
    /// <param name="il">
    /// The <see cref="ILGenerator" /> to emit the opcode to.
    /// </param>
    /// <returns>
    /// The <see cref="ILGenerator"/> passed in through <paramref name="il"/>.
    /// </returns>
    [GeneratedCode("opcodes.t4.tt", null)]
    public static ILGenerator conv_ovf_u8_un(this ILGenerator il)
    {
        Guard.NotNull(il);
        il.Emit(OpCodes.Conv_Ovf_U8_Un);
        return il;
    }

    /// <summary>
    /// Emits the opcode <see cref="OpCodes.Cpblk"/>
    /// </summary>
    /// <param name="il">
    /// The <see cref="ILGenerator" /> to emit the opcode to.
    /// </param>
    /// <returns>
    /// The <see cref="ILGenerator"/> passed in through <paramref name="il"/>.
    /// </returns>
    [GeneratedCode("opcodes.t4.tt", null)]
    public static ILGenerator cpblk(this ILGenerator il)
    {
        Guard.NotNull(il);
        il.Emit(OpCodes.Cpblk);
        return il;
    }

    /// <summary>
    /// Emits the opcode <see cref="OpCodes.Cpobj"/>
    /// </summary>
    /// <param name="il">
    /// The <see cref="ILGenerator" /> to emit the opcode to.
    /// </param>
    /// <param name="value">
    /// The <see cref="Type"/> value to emit with the opcode.
    /// </param>
    /// <returns>
    /// The <see cref="ILGenerator"/> passed in through <paramref name="il"/>.
    /// </returns>
    [GeneratedCode("opcodes.t4.tt", null)]
    public static ILGenerator cpobj(this ILGenerator il, Type value)
    {
        Guard.NotNull(il);
        il.Emit(OpCodes.Cpobj, value);
        return il;
    }

    /// <summary>
    /// Emits the opcode <see cref="OpCodes.Ret"/>
    /// </summary>
    /// <param name="il">
    /// The <see cref="ILGenerator" /> to emit the opcode to.
    /// </param>
    /// <returns>
    /// The <see cref="ILGenerator"/> passed in through <paramref name="il"/>.
    /// </returns>
    [GeneratedCode("opcodes.t4.tt", null)]
    public static ILGenerator ret(this ILGenerator il)
    {
        Guard.NotNull(il);
        il.Emit(OpCodes.Ret);
        return il;
    }

    /// <summary>
    /// Emits the opcode <see cref="OpCodes.Jmp"/>
    /// </summary>
    /// <param name="il">
    /// The <see cref="ILGenerator" /> to emit the opcode to.
    /// </param>
    /// <param name="value">
    /// The <see cref="MethodInfo"/> value to emit with the opcode.
    /// </param>
    /// <returns>
    /// The <see cref="ILGenerator"/> passed in through <paramref name="il"/>.
    /// </returns>
    [GeneratedCode("opcodes.t4.tt", null)]
    public static ILGenerator jmp(this ILGenerator il, MethodInfo value)
    {
        Guard.NotNull(il);
        il.Emit(OpCodes.Jmp, value);
        return il;
    }

    /// <summary>
    /// Emits the opcode <see cref="OpCodes.Ldc_I4_M1"/>
    /// </summary>
    /// <param name="il">
    /// The <see cref="ILGenerator" /> to emit the opcode to.
    /// </param>
    /// <returns>
    /// The <see cref="ILGenerator"/> passed in through <paramref name="il"/>.
    /// </returns>
    [GeneratedCode("opcodes.t4.tt", null)]
    public static ILGenerator ldc_i4_m1(this ILGenerator il)
    {
        Guard.NotNull(il);
        il.Emit(OpCodes.Ldc_I4_M1);
        return il;
    }

    /// <summary>
    /// Emits the opcode <see cref="OpCodes.Ldc_I4_0"/>
    /// </summary>
    /// <param name="il">
    /// The <see cref="ILGenerator" /> to emit the opcode to.
    /// </param>
    /// <returns>
    /// The <see cref="ILGenerator"/> passed in through <paramref name="il"/>.
    /// </returns>
    [GeneratedCode("opcodes.t4.tt", null)]
    public static ILGenerator ldc_i4_0(this ILGenerator il)
    {
        Guard.NotNull(il);
        il.Emit(OpCodes.Ldc_I4_0);
        return il;
    }

    /// <summary>
    /// Emits the opcode <see cref="OpCodes.Ldc_I4_1"/>
    /// </summary>
    /// <param name="il">
    /// The <see cref="ILGenerator" /> to emit the opcode to.
    /// </param>
    /// <returns>
    /// The <see cref="ILGenerator"/> passed in through <paramref name="il"/>.
    /// </returns>
    [GeneratedCode("opcodes.t4.tt", null)]
    public static ILGenerator ldc_i4_1(this ILGenerator il)
    {
        Guard.NotNull(il);
        il.Emit(OpCodes.Ldc_I4_1);
        return il;
    }

    /// <summary>
    /// Emits the opcode <see cref="OpCodes.Ldc_I4_2"/>
    /// </summary>
    /// <param name="il">
    /// The <see cref="ILGenerator" /> to emit the opcode to.
    /// </param>
    /// <returns>
    /// The <see cref="ILGenerator"/> passed in through <paramref name="il"/>.
    /// </returns>
    [GeneratedCode("opcodes.t4.tt", null)]
    public static ILGenerator ldc_i4_2(this ILGenerator il)
    {
        Guard.NotNull(il);
        il.Emit(OpCodes.Ldc_I4_2);
        return il;
    }

    /// <summary>
    /// Emits the opcode <see cref="OpCodes.Ldc_I4_3"/>
    /// </summary>
    /// <param name="il">
    /// The <see cref="ILGenerator" /> to emit the opcode to.
    /// </param>
    /// <returns>
    /// The <see cref="ILGenerator"/> passed in through <paramref name="il"/>.
    /// </returns>
    [GeneratedCode("opcodes.t4.tt", null)]
    public static ILGenerator ldc_i4_3(this ILGenerator il)
    {
        Guard.NotNull(il);
        il.Emit(OpCodes.Ldc_I4_3);
        return il;
    }

    /// <summary>
    /// Emits the opcode <see cref="OpCodes.Ldc_I4_4"/>
    /// </summary>
    /// <param name="il">
    /// The <see cref="ILGenerator" /> to emit the opcode to.
    /// </param>
    /// <returns>
    /// The <see cref="ILGenerator"/> passed in through <paramref name="il"/>.
    /// </returns>
    [GeneratedCode("opcodes.t4.tt", null)]
    public static ILGenerator ldc_i4_4(this ILGenerator il)
    {
        Guard.NotNull(il);
        il.Emit(OpCodes.Ldc_I4_4);
        return il;
    }

    /// <summary>
    /// Emits the opcode <see cref="OpCodes.Ldc_I4_5"/>
    /// </summary>
    /// <param name="il">
    /// The <see cref="ILGenerator" /> to emit the opcode to.
    /// </param>
    /// <returns>
    /// The <see cref="ILGenerator"/> passed in through <paramref name="il"/>.
    /// </returns>
    [GeneratedCode("opcodes.t4.tt", null)]
    public static ILGenerator ldc_i4_5(this ILGenerator il)
    {
        Guard.NotNull(il);
        il.Emit(OpCodes.Ldc_I4_5);
        return il;
    }

    /// <summary>
    /// Emits the opcode <see cref="OpCodes.Ldc_I4_6"/>
    /// </summary>
    /// <param name="il">
    /// The <see cref="ILGenerator" /> to emit the opcode to.
    /// </param>
    /// <returns>
    /// The <see cref="ILGenerator"/> passed in through <paramref name="il"/>.
    /// </returns>
    [GeneratedCode("opcodes.t4.tt", null)]
    public static ILGenerator ldc_i4_6(this ILGenerator il)
    {
        Guard.NotNull(il);
        il.Emit(OpCodes.Ldc_I4_6);
        return il;
    }

    /// <summary>
    /// Emits the opcode <see cref="OpCodes.Ldc_I4_7"/>
    /// </summary>
    /// <param name="il">
    /// The <see cref="ILGenerator" /> to emit the opcode to.
    /// </param>
    /// <returns>
    /// The <see cref="ILGenerator"/> passed in through <paramref name="il"/>.
    /// </returns>
    [GeneratedCode("opcodes.t4.tt", null)]
    public static ILGenerator ldc_i4_7(this ILGenerator il)
    {
        Guard.NotNull(il);
        il.Emit(OpCodes.Ldc_I4_7);
        return il;
    }

    /// <summary>
    /// Emits the opcode <see cref="OpCodes.Ldc_I4_8"/>
    /// </summary>
    /// <param name="il">
    /// The <see cref="ILGenerator" /> to emit the opcode to.
    /// </param>
    /// <returns>
    /// The <see cref="ILGenerator"/> passed in through <paramref name="il"/>.
    /// </returns>
    [GeneratedCode("opcodes.t4.tt", null)]
    public static ILGenerator ldc_i4_8(this ILGenerator il)
    {
        Guard.NotNull(il);
        il.Emit(OpCodes.Ldc_I4_8);
        return il;
    }

    /// <summary>
    /// Emits the opcode <see cref="OpCodes.Ldc_I4"/>
    /// </summary>
    /// <param name="il">
    /// The <see cref="ILGenerator" /> to emit the opcode to.
    /// </param>
    /// <param name="value">
    /// The <see cref="int"/> value to emit with the opcode.
    /// </param>
    /// <returns>
    /// The <see cref="ILGenerator"/> passed in through <paramref name="il"/>.
    /// </returns>
    [GeneratedCode("opcodes.t4.tt", null)]
    public static ILGenerator ldc_i4(this ILGenerator il, int value)
    {
        Guard.NotNull(il);
        il.Emit(OpCodes.Ldc_I4, value);
        return il;
    }

    /// <summary>
    /// Emits the opcode <see cref="OpCodes.Ldc_I4_S"/>
    /// </summary>
    /// <param name="il">
    /// The <see cref="ILGenerator" /> to emit the opcode to.
    /// </param>
    /// <param name="value">
    /// The <see cref="sbyte"/> value to emit with the opcode.
    /// </param>
    /// <returns>
    /// The <see cref="ILGenerator"/> passed in through <paramref name="il"/>.
    /// </returns>
    [GeneratedCode("opcodes.t4.tt", null)]
    public static ILGenerator ldc_i4_s(this ILGenerator il, sbyte value)
    {
        Guard.NotNull(il);
        il.Emit(OpCodes.Ldc_I4_S, value);
        return il;
    }

    /// <summary>
    /// Emits the opcode <see cref="OpCodes.Ldc_I8"/>
    /// </summary>
    /// <param name="il">
    /// The <see cref="ILGenerator" /> to emit the opcode to.
    /// </param>
    /// <param name="value">
    /// The <see cref="long"/> value to emit with the opcode.
    /// </param>
    /// <returns>
    /// The <see cref="ILGenerator"/> passed in through <paramref name="il"/>.
    /// </returns>
    [GeneratedCode("opcodes.t4.tt", null)]
    public static ILGenerator ldc_i8(this ILGenerator il, long value)
    {
        Guard.NotNull(il);
        il.Emit(OpCodes.Ldc_I8, value);
        return il;
    }

    /// <summary>
    /// Emits the opcode <see cref="OpCodes.Ldc_R4"/>
    /// </summary>
    /// <param name="il">
    /// The <see cref="ILGenerator" /> to emit the opcode to.
    /// </param>
    /// <param name="value">
    /// The <see cref="float"/> value to emit with the opcode.
    /// </param>
    /// <returns>
    /// The <see cref="ILGenerator"/> passed in through <paramref name="il"/>.
    /// </returns>
    [GeneratedCode("opcodes.t4.tt", null)]
    public static ILGenerator ldc_r4(this ILGenerator il, float value)
    {
        Guard.NotNull(il);
        il.Emit(OpCodes.Ldc_R4, value);
        return il;
    }

    /// <summary>
    /// Emits the opcode <see cref="OpCodes.Ldc_R8"/>
    /// </summary>
    /// <param name="il">
    /// The <see cref="ILGenerator" /> to emit the opcode to.
    /// </param>
    /// <param name="value">
    /// The <see cref="double"/> value to emit with the opcode.
    /// </param>
    /// <returns>
    /// The <see cref="ILGenerator"/> passed in through <paramref name="il"/>.
    /// </returns>
    [GeneratedCode("opcodes.t4.tt", null)]
    public static ILGenerator ldc_r8(this ILGenerator il, double value)
    {
        Guard.NotNull(il);
        il.Emit(OpCodes.Ldc_R8, value);
        return il;
    }

    /// <summary>
    /// Emits the opcode <see cref="OpCodes.Ldarg"/>
    /// </summary>
    /// <param name="il">
    /// The <see cref="ILGenerator" /> to emit the opcode to.
    /// </param>
    /// <param name="value">
    /// The <see cref="short"/> value to emit with the opcode.
    /// </param>
    /// <returns>
    /// The <see cref="ILGenerator"/> passed in through <paramref name="il"/>.
    /// </returns>
    [GeneratedCode("opcodes.t4.tt", null)]
    public static ILGenerator ldarg(this ILGenerator il, short value)
    {
        Guard.NotNull(il);
        il.Emit(OpCodes.Ldarg, value);
        return il;
    }

    /// <summary>
    /// Emits the opcode <see cref="OpCodes.Ldarg_0"/>
    /// </summary>
    /// <param name="il">
    /// The <see cref="ILGenerator" /> to emit the opcode to.
    /// </param>
    /// <returns>
    /// The <see cref="ILGenerator"/> passed in through <paramref name="il"/>.
    /// </returns>
    [GeneratedCode("opcodes.t4.tt", null)]
    public static ILGenerator ldarg_0(this ILGenerator il)
    {
        Guard.NotNull(il);
        il.Emit(OpCodes.Ldarg_0);
        return il;
    }

    /// <summary>
    /// Emits the opcode <see cref="OpCodes.Ldarg_1"/>
    /// </summary>
    /// <param name="il">
    /// The <see cref="ILGenerator" /> to emit the opcode to.
    /// </param>
    /// <returns>
    /// The <see cref="ILGenerator"/> passed in through <paramref name="il"/>.
    /// </returns>
    [GeneratedCode("opcodes.t4.tt", null)]
    public static ILGenerator ldarg_1(this ILGenerator il)
    {
        Guard.NotNull(il);
        il.Emit(OpCodes.Ldarg_1);
        return il;
    }

    /// <summary>
    /// Emits the opcode <see cref="OpCodes.Ldarg_2"/>
    /// </summary>
    /// <param name="il">
    /// The <see cref="ILGenerator" /> to emit the opcode to.
    /// </param>
    /// <returns>
    /// The <see cref="ILGenerator"/> passed in through <paramref name="il"/>.
    /// </returns>
    [GeneratedCode("opcodes.t4.tt", null)]
    public static ILGenerator ldarg_2(this ILGenerator il)
    {
        Guard.NotNull(il);
        il.Emit(OpCodes.Ldarg_2);
        return il;
    }

    /// <summary>
    /// Emits the opcode <see cref="OpCodes.Ldarg_3"/>
    /// </summary>
    /// <param name="il">
    /// The <see cref="ILGenerator" /> to emit the opcode to.
    /// </param>
    /// <returns>
    /// The <see cref="ILGenerator"/> passed in through <paramref name="il"/>.
    /// </returns>
    [GeneratedCode("opcodes.t4.tt", null)]
    public static ILGenerator ldarg_3(this ILGenerator il)
    {
        Guard.NotNull(il);
        il.Emit(OpCodes.Ldarg_3);
        return il;
    }

    /// <summary>
    /// Emits the opcode <see cref="OpCodes.Ldarg_S"/>
    /// </summary>
    /// <param name="il">
    /// The <see cref="ILGenerator" /> to emit the opcode to.
    /// </param>
    /// <returns>
    /// The <see cref="ILGenerator"/> passed in through <paramref name="il"/>.
    /// </returns>
    [GeneratedCode("opcodes.t4.tt", null)]
    public static ILGenerator ldarg_s(this ILGenerator il)
    {
        Guard.NotNull(il);
        il.Emit(OpCodes.Ldarg_S);
        return il;
    }

    /// <summary>
    /// Emits the opcode <see cref="OpCodes.Ldarga"/>
    /// </summary>
    /// <param name="il">
    /// The <see cref="ILGenerator" /> to emit the opcode to.
    /// </param>
    /// <param name="value">
    /// The <see cref="short"/> value to emit with the opcode.
    /// </param>
    /// <returns>
    /// The <see cref="ILGenerator"/> passed in through <paramref name="il"/>.
    /// </returns>
    [GeneratedCode("opcodes.t4.tt", null)]
    public static ILGenerator ldarga(this ILGenerator il, short value)
    {
        Guard.NotNull(il);
        il.Emit(OpCodes.Ldarga, value);
        return il;
    }

    /// <summary>
    /// Emits the opcode <see cref="OpCodes.Ldarga_S"/>
    /// </summary>
    /// <param name="il">
    /// The <see cref="ILGenerator" /> to emit the opcode to.
    /// </param>
    /// <param name="value">
    /// The <see cref="byte"/> value to emit with the opcode.
    /// </param>
    /// <returns>
    /// The <see cref="ILGenerator"/> passed in through <paramref name="il"/>.
    /// </returns>
    [GeneratedCode("opcodes.t4.tt", null)]
    public static ILGenerator ldarga_s(this ILGenerator il, byte value)
    {
        Guard.NotNull(il);
        il.Emit(OpCodes.Ldarga_S, value);
        return il;
    }

    /// <summary>
    /// Emits the opcode <see cref="OpCodes.Ldelem"/>
    /// </summary>
    /// <param name="il">
    /// The <see cref="ILGenerator" /> to emit the opcode to.
    /// </param>
    /// <param name="value">
    /// The <see cref="Type"/> value to emit with the opcode.
    /// </param>
    /// <returns>
    /// The <see cref="ILGenerator"/> passed in through <paramref name="il"/>.
    /// </returns>
    [GeneratedCode("opcodes.t4.tt", null)]
    public static ILGenerator ldelem(this ILGenerator il, Type value)
    {
        Guard.NotNull(il);
        il.Emit(OpCodes.Ldelem, value);
        return il;
    }

    /// <summary>
    /// Emits the opcode <see cref="OpCodes.Ldelem_I"/>
    /// </summary>
    /// <param name="il">
    /// The <see cref="ILGenerator" /> to emit the opcode to.
    /// </param>
    /// <returns>
    /// The <see cref="ILGenerator"/> passed in through <paramref name="il"/>.
    /// </returns>
    [GeneratedCode("opcodes.t4.tt", null)]
    public static ILGenerator ldelem_i(this ILGenerator il)
    {
        Guard.NotNull(il);
        il.Emit(OpCodes.Ldelem_I);
        return il;
    }

    /// <summary>
    /// Emits the opcode <see cref="OpCodes.Ldelem_I1"/>
    /// </summary>
    /// <param name="il">
    /// The <see cref="ILGenerator" /> to emit the opcode to.
    /// </param>
    /// <returns>
    /// The <see cref="ILGenerator"/> passed in through <paramref name="il"/>.
    /// </returns>
    [GeneratedCode("opcodes.t4.tt", null)]
    public static ILGenerator ldelem_i1(this ILGenerator il)
    {
        Guard.NotNull(il);
        il.Emit(OpCodes.Ldelem_I1);
        return il;
    }

    /// <summary>
    /// Emits the opcode <see cref="OpCodes.Ldelem_I2"/>
    /// </summary>
    /// <param name="il">
    /// The <see cref="ILGenerator" /> to emit the opcode to.
    /// </param>
    /// <returns>
    /// The <see cref="ILGenerator"/> passed in through <paramref name="il"/>.
    /// </returns>
    [GeneratedCode("opcodes.t4.tt", null)]
    public static ILGenerator ldelem_i2(this ILGenerator il)
    {
        Guard.NotNull(il);
        il.Emit(OpCodes.Ldelem_I2);
        return il;
    }

    /// <summary>
    /// Emits the opcode <see cref="OpCodes.Ldelem_I4"/>
    /// </summary>
    /// <param name="il">
    /// The <see cref="ILGenerator" /> to emit the opcode to.
    /// </param>
    /// <returns>
    /// The <see cref="ILGenerator"/> passed in through <paramref name="il"/>.
    /// </returns>
    [GeneratedCode("opcodes.t4.tt", null)]
    public static ILGenerator ldelem_i4(this ILGenerator il)
    {
        Guard.NotNull(il);
        il.Emit(OpCodes.Ldelem_I4);
        return il;
    }

    /// <summary>
    /// Emits the opcode <see cref="OpCodes.Ldelem_I8"/>
    /// </summary>
    /// <param name="il">
    /// The <see cref="ILGenerator" /> to emit the opcode to.
    /// </param>
    /// <returns>
    /// The <see cref="ILGenerator"/> passed in through <paramref name="il"/>.
    /// </returns>
    [GeneratedCode("opcodes.t4.tt", null)]
    public static ILGenerator ldelem_i8(this ILGenerator il)
    {
        Guard.NotNull(il);
        il.Emit(OpCodes.Ldelem_I8);
        return il;
    }

    /// <summary>
    /// Emits the opcode <see cref="OpCodes.Ldelem_Ref"/>
    /// </summary>
    /// <param name="il">
    /// The <see cref="ILGenerator" /> to emit the opcode to.
    /// </param>
    /// <returns>
    /// The <see cref="ILGenerator"/> passed in through <paramref name="il"/>.
    /// </returns>
    [GeneratedCode("opcodes.t4.tt", null)]
    public static ILGenerator ldelem_ref(this ILGenerator il)
    {
        Guard.NotNull(il);
        il.Emit(OpCodes.Ldelem_Ref);
        return il;
    }

    /// <summary>
    /// Emits the opcode <see cref="OpCodes.Ldelem_R4"/>
    /// </summary>
    /// <param name="il">
    /// The <see cref="ILGenerator" /> to emit the opcode to.
    /// </param>
    /// <returns>
    /// The <see cref="ILGenerator"/> passed in through <paramref name="il"/>.
    /// </returns>
    [GeneratedCode("opcodes.t4.tt", null)]
    public static ILGenerator ldelem_r4(this ILGenerator il)
    {
        Guard.NotNull(il);
        il.Emit(OpCodes.Ldelem_R4);
        return il;
    }

    /// <summary>
    /// Emits the opcode <see cref="OpCodes.Ldelem_R8"/>
    /// </summary>
    /// <param name="il">
    /// The <see cref="ILGenerator" /> to emit the opcode to.
    /// </param>
    /// <returns>
    /// The <see cref="ILGenerator"/> passed in through <paramref name="il"/>.
    /// </returns>
    [GeneratedCode("opcodes.t4.tt", null)]
    public static ILGenerator ldelem_r8(this ILGenerator il)
    {
        Guard.NotNull(il);
        il.Emit(OpCodes.Ldelem_R8);
        return il;
    }

    /// <summary>
    /// Emits the opcode <see cref="OpCodes.Ldelem_U1"/>
    /// </summary>
    /// <param name="il">
    /// The <see cref="ILGenerator" /> to emit the opcode to.
    /// </param>
    /// <returns>
    /// The <see cref="ILGenerator"/> passed in through <paramref name="il"/>.
    /// </returns>
    [GeneratedCode("opcodes.t4.tt", null)]
    public static ILGenerator ldelem_u1(this ILGenerator il)
    {
        Guard.NotNull(il);
        il.Emit(OpCodes.Ldelem_U1);
        return il;
    }

    /// <summary>
    /// Emits the opcode <see cref="OpCodes.Ldelem_U2"/>
    /// </summary>
    /// <param name="il">
    /// The <see cref="ILGenerator" /> to emit the opcode to.
    /// </param>
    /// <returns>
    /// The <see cref="ILGenerator"/> passed in through <paramref name="il"/>.
    /// </returns>
    [GeneratedCode("opcodes.t4.tt", null)]
    public static ILGenerator ldelem_u2(this ILGenerator il)
    {
        Guard.NotNull(il);
        il.Emit(OpCodes.Ldelem_U2);
        return il;
    }

    /// <summary>
    /// Emits the opcode <see cref="OpCodes.Ldelem_U4"/>
    /// </summary>
    /// <param name="il">
    /// The <see cref="ILGenerator" /> to emit the opcode to.
    /// </param>
    /// <returns>
    /// The <see cref="ILGenerator"/> passed in through <paramref name="il"/>.
    /// </returns>
    [GeneratedCode("opcodes.t4.tt", null)]
    public static ILGenerator ldelem_u4(this ILGenerator il)
    {
        Guard.NotNull(il);
        il.Emit(OpCodes.Ldelem_U4);
        return il;
    }

    /// <summary>
    /// Emits the opcode <see cref="OpCodes.Ldelema"/>
    /// </summary>
    /// <param name="il">
    /// The <see cref="ILGenerator" /> to emit the opcode to.
    /// </param>
    /// <param name="value">
    /// The <see cref="Type"/> value to emit with the opcode.
    /// </param>
    /// <returns>
    /// The <see cref="ILGenerator"/> passed in through <paramref name="il"/>.
    /// </returns>
    [GeneratedCode("opcodes.t4.tt", null)]
    public static ILGenerator ldelema(this ILGenerator il, Type value)
    {
        Guard.NotNull(il);
        il.Emit(OpCodes.Ldelema, value);
        return il;
    }

    /// <summary>
    /// Emits the opcode <see cref="OpCodes.Ldfld"/>
    /// </summary>
    /// <param name="il">
    /// The <see cref="ILGenerator" /> to emit the opcode to.
    /// </param>
    /// <param name="value">
    /// The <see cref="FieldInfo"/> value to emit with the opcode.
    /// </param>
    /// <returns>
    /// The <see cref="ILGenerator"/> passed in through <paramref name="il"/>.
    /// </returns>
    [GeneratedCode("opcodes.t4.tt", null)]
    public static ILGenerator ldfld(this ILGenerator il, FieldInfo value)
    {
        Guard.NotNull(il);
        il.Emit(OpCodes.Ldfld, value);
        return il;
    }

    /// <summary>
    /// Emits the opcode <see cref="OpCodes.Ldflda"/>
    /// </summary>
    /// <param name="il">
    /// The <see cref="ILGenerator" /> to emit the opcode to.
    /// </param>
    /// <param name="value">
    /// The <see cref="FieldInfo"/> value to emit with the opcode.
    /// </param>
    /// <returns>
    /// The <see cref="ILGenerator"/> passed in through <paramref name="il"/>.
    /// </returns>
    [GeneratedCode("opcodes.t4.tt", null)]
    public static ILGenerator ldflda(this ILGenerator il, FieldInfo value)
    {
        Guard.NotNull(il);
        il.Emit(OpCodes.Ldflda, value);
        return il;
    }

    /// <summary>
    /// Emits the opcode <see cref="OpCodes.Ldftn"/>
    /// </summary>
    /// <param name="il">
    /// The <see cref="ILGenerator" /> to emit the opcode to.
    /// </param>
    /// <param name="value">
    /// The <see cref="MethodInfo"/> value to emit with the opcode.
    /// </param>
    /// <returns>
    /// The <see cref="ILGenerator"/> passed in through <paramref name="il"/>.
    /// </returns>
    [GeneratedCode("opcodes.t4.tt", null)]
    public static ILGenerator ldftn(this ILGenerator il, MethodInfo value)
    {
        Guard.NotNull(il);
        il.Emit(OpCodes.Ldftn, value);
        return il;
    }

    /// <summary>
    /// Emits the opcode <see cref="OpCodes.Ldind_I"/>
    /// </summary>
    /// <param name="il">
    /// The <see cref="ILGenerator" /> to emit the opcode to.
    /// </param>
    /// <returns>
    /// The <see cref="ILGenerator"/> passed in through <paramref name="il"/>.
    /// </returns>
    [GeneratedCode("opcodes.t4.tt", null)]
    public static ILGenerator ldind_i(this ILGenerator il)
    {
        Guard.NotNull(il);
        il.Emit(OpCodes.Ldind_I);
        return il;
    }

    /// <summary>
    /// Emits the opcode <see cref="OpCodes.Ldind_I1"/>
    /// </summary>
    /// <param name="il">
    /// The <see cref="ILGenerator" /> to emit the opcode to.
    /// </param>
    /// <returns>
    /// The <see cref="ILGenerator"/> passed in through <paramref name="il"/>.
    /// </returns>
    [GeneratedCode("opcodes.t4.tt", null)]
    public static ILGenerator ldind_i1(this ILGenerator il)
    {
        Guard.NotNull(il);
        il.Emit(OpCodes.Ldind_I1);
        return il;
    }

    /// <summary>
    /// Emits the opcode <see cref="OpCodes.Ldind_I2"/>
    /// </summary>
    /// <param name="il">
    /// The <see cref="ILGenerator" /> to emit the opcode to.
    /// </param>
    /// <returns>
    /// The <see cref="ILGenerator"/> passed in through <paramref name="il"/>.
    /// </returns>
    [GeneratedCode("opcodes.t4.tt", null)]
    public static ILGenerator ldind_i2(this ILGenerator il)
    {
        Guard.NotNull(il);
        il.Emit(OpCodes.Ldind_I2);
        return il;
    }

    /// <summary>
    /// Emits the opcode <see cref="OpCodes.Ldind_I4"/>
    /// </summary>
    /// <param name="il">
    /// The <see cref="ILGenerator" /> to emit the opcode to.
    /// </param>
    /// <returns>
    /// The <see cref="ILGenerator"/> passed in through <paramref name="il"/>.
    /// </returns>
    [GeneratedCode("opcodes.t4.tt", null)]
    public static ILGenerator ldind_i4(this ILGenerator il)
    {
        Guard.NotNull(il);
        il.Emit(OpCodes.Ldind_I4);
        return il;
    }

    /// <summary>
    /// Emits the opcode <see cref="OpCodes.Ldind_I8"/>
    /// </summary>
    /// <param name="il">
    /// The <see cref="ILGenerator" /> to emit the opcode to.
    /// </param>
    /// <returns>
    /// The <see cref="ILGenerator"/> passed in through <paramref name="il"/>.
    /// </returns>
    [GeneratedCode("opcodes.t4.tt", null)]
    public static ILGenerator ldind_i8(this ILGenerator il)
    {
        Guard.NotNull(il);
        il.Emit(OpCodes.Ldind_I8);
        return il;
    }

    /// <summary>
    /// Emits the opcode <see cref="OpCodes.Ldind_Ref"/>
    /// </summary>
    /// <param name="il">
    /// The <see cref="ILGenerator" /> to emit the opcode to.
    /// </param>
    /// <returns>
    /// The <see cref="ILGenerator"/> passed in through <paramref name="il"/>.
    /// </returns>
    [GeneratedCode("opcodes.t4.tt", null)]
    public static ILGenerator ldind_ref(this ILGenerator il)
    {
        Guard.NotNull(il);
        il.Emit(OpCodes.Ldind_Ref);
        return il;
    }

    /// <summary>
    /// Emits the opcode <see cref="OpCodes.Ldind_R4"/>
    /// </summary>
    /// <param name="il">
    /// The <see cref="ILGenerator" /> to emit the opcode to.
    /// </param>
    /// <returns>
    /// The <see cref="ILGenerator"/> passed in through <paramref name="il"/>.
    /// </returns>
    [GeneratedCode("opcodes.t4.tt", null)]
    public static ILGenerator ldind_r4(this ILGenerator il)
    {
        Guard.NotNull(il);
        il.Emit(OpCodes.Ldind_R4);
        return il;
    }

    /// <summary>
    /// Emits the opcode <see cref="OpCodes.Ldind_R8"/>
    /// </summary>
    /// <param name="il">
    /// The <see cref="ILGenerator" /> to emit the opcode to.
    /// </param>
    /// <returns>
    /// The <see cref="ILGenerator"/> passed in through <paramref name="il"/>.
    /// </returns>
    [GeneratedCode("opcodes.t4.tt", null)]
    public static ILGenerator ldind_r8(this ILGenerator il)
    {
        Guard.NotNull(il);
        il.Emit(OpCodes.Ldind_R8);
        return il;
    }

    /// <summary>
    /// Emits the opcode <see cref="OpCodes.Ldind_U1"/>
    /// </summary>
    /// <param name="il">
    /// The <see cref="ILGenerator" /> to emit the opcode to.
    /// </param>
    /// <returns>
    /// The <see cref="ILGenerator"/> passed in through <paramref name="il"/>.
    /// </returns>
    [GeneratedCode("opcodes.t4.tt", null)]
    public static ILGenerator ldind_u1(this ILGenerator il)
    {
        Guard.NotNull(il);
        il.Emit(OpCodes.Ldind_U1);
        return il;
    }

    /// <summary>
    /// Emits the opcode <see cref="OpCodes.Ldind_U2"/>
    /// </summary>
    /// <param name="il">
    /// The <see cref="ILGenerator" /> to emit the opcode to.
    /// </param>
    /// <returns>
    /// The <see cref="ILGenerator"/> passed in through <paramref name="il"/>.
    /// </returns>
    [GeneratedCode("opcodes.t4.tt", null)]
    public static ILGenerator ldind_u2(this ILGenerator il)
    {
        Guard.NotNull(il);
        il.Emit(OpCodes.Ldind_U2);
        return il;
    }

    /// <summary>
    /// Emits the opcode <see cref="OpCodes.Ldind_U4"/>
    /// </summary>
    /// <param name="il">
    /// The <see cref="ILGenerator" /> to emit the opcode to.
    /// </param>
    /// <returns>
    /// The <see cref="ILGenerator"/> passed in through <paramref name="il"/>.
    /// </returns>
    [GeneratedCode("opcodes.t4.tt", null)]
    public static ILGenerator ldind_u4(this ILGenerator il)
    {
        Guard.NotNull(il);
        il.Emit(OpCodes.Ldind_U4);
        return il;
    }

    /// <summary>
    /// Emits the opcode <see cref="OpCodes.Ldlen"/>
    /// </summary>
    /// <param name="il">
    /// The <see cref="ILGenerator" /> to emit the opcode to.
    /// </param>
    /// <returns>
    /// The <see cref="ILGenerator"/> passed in through <paramref name="il"/>.
    /// </returns>
    [GeneratedCode("opcodes.t4.tt", null)]
    public static ILGenerator ldlen(this ILGenerator il)
    {
        Guard.NotNull(il);
        il.Emit(OpCodes.Ldlen);
        return il;
    }

    /// <summary>
    /// Emits the opcode <see cref="OpCodes.Ldloc"/>
    /// </summary>
    /// <param name="il">
    /// The <see cref="ILGenerator" /> to emit the opcode to.
    /// </param>
    /// <param name="value">
    /// The <see cref="short"/> value to emit with the opcode.
    /// </param>
    /// <returns>
    /// The <see cref="ILGenerator"/> passed in through <paramref name="il"/>.
    /// </returns>
    [GeneratedCode("opcodes.t4.tt", null)]
    public static ILGenerator ldloc(this ILGenerator il, short value)
    {
        Guard.NotNull(il);
        il.Emit(OpCodes.Ldloc, value);
        return il;
    }

    /// <summary>
    /// Emits the opcode <see cref="OpCodes.Ldloc"/>
    /// </summary>
    /// <param name="il">
    /// The <see cref="ILGenerator" /> to emit the opcode to.
    /// </param>
    /// <param name="value">
    /// The <see cref="LocalBuilder"/> value to emit with the opcode.
    /// </param>
    /// <returns>
    /// The <see cref="ILGenerator"/> passed in through <paramref name="il"/>.
    /// </returns>
    [GeneratedCode("opcodes.t4.tt", null)]
    public static ILGenerator ldloc(this ILGenerator il, LocalBuilder value)
    {
        Guard.NotNull(il);
        il.Emit(OpCodes.Ldloc, value);
        return il;
    }

    /// <summary>
    /// Emits the opcode <see cref="OpCodes.Ldloc_0"/>
    /// </summary>
    /// <param name="il">
    /// The <see cref="ILGenerator" /> to emit the opcode to.
    /// </param>
    /// <returns>
    /// The <see cref="ILGenerator"/> passed in through <paramref name="il"/>.
    /// </returns>
    [GeneratedCode("opcodes.t4.tt", null)]
    public static ILGenerator ldloc_0(this ILGenerator il)
    {
        Guard.NotNull(il);
        il.Emit(OpCodes.Ldloc_0);
        return il;
    }

    /// <summary>
    /// Emits the opcode <see cref="OpCodes.Ldloc_1"/>
    /// </summary>
    /// <param name="il">
    /// The <see cref="ILGenerator" /> to emit the opcode to.
    /// </param>
    /// <returns>
    /// The <see cref="ILGenerator"/> passed in through <paramref name="il"/>.
    /// </returns>
    [GeneratedCode("opcodes.t4.tt", null)]
    public static ILGenerator ldloc_1(this ILGenerator il)
    {
        Guard.NotNull(il);
        il.Emit(OpCodes.Ldloc_1);
        return il;
    }

    /// <summary>
    /// Emits the opcode <see cref="OpCodes.Ldloc_2"/>
    /// </summary>
    /// <param name="il">
    /// The <see cref="ILGenerator" /> to emit the opcode to.
    /// </param>
    /// <returns>
    /// The <see cref="ILGenerator"/> passed in through <paramref name="il"/>.
    /// </returns>
    [GeneratedCode("opcodes.t4.tt", null)]
    public static ILGenerator ldloc_2(this ILGenerator il)
    {
        Guard.NotNull(il);
        il.Emit(OpCodes.Ldloc_2);
        return il;
    }

    /// <summary>
    /// Emits the opcode <see cref="OpCodes.Ldloc_3"/>
    /// </summary>
    /// <param name="il">
    /// The <see cref="ILGenerator" /> to emit the opcode to.
    /// </param>
    /// <returns>
    /// The <see cref="ILGenerator"/> passed in through <paramref name="il"/>.
    /// </returns>
    [GeneratedCode("opcodes.t4.tt", null)]
    public static ILGenerator ldloc_3(this ILGenerator il)
    {
        Guard.NotNull(il);
        il.Emit(OpCodes.Ldloc_3);
        return il;
    }

    /// <summary>
    /// Emits the opcode <see cref="OpCodes.Ldloc_S"/>
    /// </summary>
    /// <param name="il">
    /// The <see cref="ILGenerator" /> to emit the opcode to.
    /// </param>
    /// <param name="value">
    /// The <see cref="byte"/> value to emit with the opcode.
    /// </param>
    /// <returns>
    /// The <see cref="ILGenerator"/> passed in through <paramref name="il"/>.
    /// </returns>
    [GeneratedCode("opcodes.t4.tt", null)]
    public static ILGenerator ldloc_s(this ILGenerator il, byte value)
    {
        Guard.NotNull(il);
        il.Emit(OpCodes.Ldloc_S, value);
        return il;
    }

    /// <summary>
    /// Emits the opcode <see cref="OpCodes.Ldloc_S"/>
    /// </summary>
    /// <param name="il">
    /// The <see cref="ILGenerator" /> to emit the opcode to.
    /// </param>
    /// <param name="value">
    /// The <see cref="LocalBuilder"/> value to emit with the opcode.
    /// </param>
    /// <returns>
    /// The <see cref="ILGenerator"/> passed in through <paramref name="il"/>.
    /// </returns>
    [GeneratedCode("opcodes.t4.tt", null)]
    public static ILGenerator ldloc_s(this ILGenerator il, LocalBuilder value)
    {
        Guard.NotNull(il);
        il.Emit(OpCodes.Ldloc_S, value);
        return il;
    }

    /// <summary>
    /// Emits the opcode <see cref="OpCodes.Ldloca"/>
    /// </summary>
    /// <param name="il">
    /// The <see cref="ILGenerator" /> to emit the opcode to.
    /// </param>
    /// <param name="value">
    /// The <see cref="short"/> value to emit with the opcode.
    /// </param>
    /// <returns>
    /// The <see cref="ILGenerator"/> passed in through <paramref name="il"/>.
    /// </returns>
    [GeneratedCode("opcodes.t4.tt", null)]
    public static ILGenerator ldloca(this ILGenerator il, short value)
    {
        Guard.NotNull(il);
        il.Emit(OpCodes.Ldloca, value);
        return il;
    }

    /// <summary>
    /// Emits the opcode <see cref="OpCodes.Ldloca_S"/>
    /// </summary>
    /// <param name="il">
    /// The <see cref="ILGenerator" /> to emit the opcode to.
    /// </param>
    /// <param name="value">
    /// The <see cref="byte"/> value to emit with the opcode.
    /// </param>
    /// <returns>
    /// The <see cref="ILGenerator"/> passed in through <paramref name="il"/>.
    /// </returns>
    [GeneratedCode("opcodes.t4.tt", null)]
    public static ILGenerator ldloca_s(this ILGenerator il, byte value)
    {
        Guard.NotNull(il);
        il.Emit(OpCodes.Ldloca_S, value);
        return il;
    }

    /// <summary>
    /// Emits the opcode <see cref="OpCodes.Ldobj"/>
    /// </summary>
    /// <param name="il">
    /// The <see cref="ILGenerator" /> to emit the opcode to.
    /// </param>
    /// <param name="value">
    /// The <see cref="Type"/> value to emit with the opcode.
    /// </param>
    /// <returns>
    /// The <see cref="ILGenerator"/> passed in through <paramref name="il"/>.
    /// </returns>
    [GeneratedCode("opcodes.t4.tt", null)]
    public static ILGenerator ldobj(this ILGenerator il, Type value)
    {
        Guard.NotNull(il);
        il.Emit(OpCodes.Ldobj, value);
        return il;
    }

    /// <summary>
    /// Emits the opcode <see cref="OpCodes.Ldsfld"/>
    /// </summary>
    /// <param name="il">
    /// The <see cref="ILGenerator" /> to emit the opcode to.
    /// </param>
    /// <param name="value">
    /// The <see cref="FieldInfo"/> value to emit with the opcode.
    /// </param>
    /// <returns>
    /// The <see cref="ILGenerator"/> passed in through <paramref name="il"/>.
    /// </returns>
    [GeneratedCode("opcodes.t4.tt", null)]
    public static ILGenerator ldsfld(this ILGenerator il, FieldInfo value)
    {
        Guard.NotNull(il);
        il.Emit(OpCodes.Ldsfld, value);
        return il;
    }

    /// <summary>
    /// Emits the opcode <see cref="OpCodes.Ldsflda"/>
    /// </summary>
    /// <param name="il">
    /// The <see cref="ILGenerator" /> to emit the opcode to.
    /// </param>
    /// <param name="value">
    /// The <see cref="FieldInfo"/> value to emit with the opcode.
    /// </param>
    /// <returns>
    /// The <see cref="ILGenerator"/> passed in through <paramref name="il"/>.
    /// </returns>
    [GeneratedCode("opcodes.t4.tt", null)]
    public static ILGenerator ldsflda(this ILGenerator il, FieldInfo value)
    {
        Guard.NotNull(il);
        il.Emit(OpCodes.Ldsflda, value);
        return il;
    }

    /// <summary>
    /// Emits the opcode <see cref="OpCodes.Ldstr"/>
    /// </summary>
    /// <param name="il">
    /// The <see cref="ILGenerator" /> to emit the opcode to.
    /// </param>
    /// <param name="value">
    /// The <see cref="string"/> value to emit with the opcode.
    /// </param>
    /// <returns>
    /// The <see cref="ILGenerator"/> passed in through <paramref name="il"/>.
    /// </returns>
    [GeneratedCode("opcodes.t4.tt", null)]
    public static ILGenerator ldstr(this ILGenerator il, string value)
    {
        Guard.NotNull(il);
        il.Emit(OpCodes.Ldstr, value);
        return il;
    }

    /// <summary>
    /// Emits the opcode <see cref="OpCodes.Ldtoken"/>
    /// </summary>
    /// <param name="il">
    /// The <see cref="ILGenerator" /> to emit the opcode to.
    /// </param>
    /// <param name="value">
    /// The <see cref="MethodInfo"/> value to emit with the opcode.
    /// </param>
    /// <returns>
    /// The <see cref="ILGenerator"/> passed in through <paramref name="il"/>.
    /// </returns>
    [GeneratedCode("opcodes.t4.tt", null)]
    public static ILGenerator ldtoken(this ILGenerator il, MethodInfo value)
    {
        Guard.NotNull(il);
        il.Emit(OpCodes.Ldtoken, value);
        return il;
    }

    /// <summary>
    /// Emits the opcode <see cref="OpCodes.Ldtoken"/>
    /// </summary>
    /// <param name="il">
    /// The <see cref="ILGenerator" /> to emit the opcode to.
    /// </param>
    /// <param name="value">
    /// The <see cref="FieldInfo"/> value to emit with the opcode.
    /// </param>
    /// <returns>
    /// The <see cref="ILGenerator"/> passed in through <paramref name="il"/>.
    /// </returns>
    [GeneratedCode("opcodes.t4.tt", null)]
    public static ILGenerator ldtoken(this ILGenerator il, FieldInfo value)
    {
        Guard.NotNull(il);
        il.Emit(OpCodes.Ldtoken, value);
        return il;
    }

    /// <summary>
    /// Emits the opcode <see cref="OpCodes.Ldtoken"/>
    /// </summary>
    /// <param name="il">
    /// The <see cref="ILGenerator" /> to emit the opcode to.
    /// </param>
    /// <param name="value">
    /// The <see cref="Type"/> value to emit with the opcode.
    /// </param>
    /// <returns>
    /// The <see cref="ILGenerator"/> passed in through <paramref name="il"/>.
    /// </returns>
    [GeneratedCode("opcodes.t4.tt", null)]
    public static ILGenerator ldtoken(this ILGenerator il, Type value)
    {
        Guard.NotNull(il);
        il.Emit(OpCodes.Ldtoken, value);
        return il;
    }

    /// <summary>
    /// Emits the opcode <see cref="OpCodes.Ldvirtftn"/>
    /// </summary>
    /// <param name="il">
    /// The <see cref="ILGenerator" /> to emit the opcode to.
    /// </param>
    /// <param name="value">
    /// The <see cref="MethodInfo"/> value to emit with the opcode.
    /// </param>
    /// <returns>
    /// The <see cref="ILGenerator"/> passed in through <paramref name="il"/>.
    /// </returns>
    [GeneratedCode("opcodes.t4.tt", null)]
    public static ILGenerator ldvirtftn(this ILGenerator il, MethodInfo value)
    {
        Guard.NotNull(il);
        il.Emit(OpCodes.Ldvirtftn, value);
        return il;
    }

    /// <summary>
    /// Emits the opcode <see cref="OpCodes.Leave"/>
    /// </summary>
    /// <param name="il">
    /// The <see cref="ILGenerator" /> to emit the opcode to.
    /// </param>
    /// <param name="value">
    /// The <see cref="Label"/> value to emit with the opcode.
    /// </param>
    /// <returns>
    /// The <see cref="ILGenerator"/> passed in through <paramref name="il"/>.
    /// </returns>
    [GeneratedCode("opcodes.t4.tt", null)]
    public static ILGenerator leave(this ILGenerator il, Label value)
    {
        Guard.NotNull(il);
        il.Emit(OpCodes.Leave, value);
        return il;
    }

    /// <summary>
    /// Emits the opcode <see cref="OpCodes.Leave_S"/>
    /// </summary>
    /// <param name="il">
    /// The <see cref="ILGenerator" /> to emit the opcode to.
    /// </param>
    /// <param name="value">
    /// The <see cref="Label"/> value to emit with the opcode.
    /// </param>
    /// <returns>
    /// The <see cref="ILGenerator"/> passed in through <paramref name="il"/>.
    /// </returns>
    [GeneratedCode("opcodes.t4.tt", null)]
    public static ILGenerator leave_s(this ILGenerator il, Label value)
    {
        Guard.NotNull(il);
        il.Emit(OpCodes.Leave_S, value);
        return il;
    }

    /// <summary>
    /// Emits the opcode <see cref="OpCodes.Localloc"/>
    /// </summary>
    /// <param name="il">
    /// The <see cref="ILGenerator" /> to emit the opcode to.
    /// </param>
    /// <returns>
    /// The <see cref="ILGenerator"/> passed in through <paramref name="il"/>.
    /// </returns>
    [GeneratedCode("opcodes.t4.tt", null)]
    public static ILGenerator localloc(this ILGenerator il)
    {
        Guard.NotNull(il);
        il.Emit(OpCodes.Localloc);
        return il;
    }

    /// <summary>
    /// Emits the opcode <see cref="OpCodes.Mkrefany"/>
    /// </summary>
    /// <param name="il">
    /// The <see cref="ILGenerator" /> to emit the opcode to.
    /// </param>
    /// <param name="value">
    /// The <see cref="Type"/> value to emit with the opcode.
    /// </param>
    /// <returns>
    /// The <see cref="ILGenerator"/> passed in through <paramref name="il"/>.
    /// </returns>
    [GeneratedCode("opcodes.t4.tt", null)]
    public static ILGenerator mkrefany(this ILGenerator il, Type value)
    {
        Guard.NotNull(il);
        il.Emit(OpCodes.Mkrefany, value);
        return il;
    }

    /// <summary>
    /// Emits the opcode <see cref="OpCodes.Newarr"/>
    /// </summary>
    /// <param name="il">
    /// The <see cref="ILGenerator" /> to emit the opcode to.
    /// </param>
    /// <param name="value">
    /// The <see cref="Type"/> value to emit with the opcode.
    /// </param>
    /// <returns>
    /// The <see cref="ILGenerator"/> passed in through <paramref name="il"/>.
    /// </returns>
    [GeneratedCode("opcodes.t4.tt", null)]
    public static ILGenerator newarr(this ILGenerator il, Type value)
    {
        Guard.NotNull(il);
        il.Emit(OpCodes.Newarr, value);
        return il;
    }

    /// <summary>
    /// Emits the opcode <see cref="OpCodes.Newobj"/>
    /// </summary>
    /// <param name="il">
    /// The <see cref="ILGenerator" /> to emit the opcode to.
    /// </param>
    /// <param name="value">
    /// The <see cref="ConstructorInfo"/> value to emit with the opcode.
    /// </param>
    /// <returns>
    /// The <see cref="ILGenerator"/> passed in through <paramref name="il"/>.
    /// </returns>
    [GeneratedCode("opcodes.t4.tt", null)]
    public static ILGenerator newobj(this ILGenerator il, ConstructorInfo value)
    {
        Guard.NotNull(il);
        il.Emit(OpCodes.Newobj, value);
        return il;
    }

    /// <summary>
    /// Emits the opcode <see cref="OpCodes.Readonly"/>
    /// </summary>
    /// <param name="il">
    /// The <see cref="ILGenerator" /> to emit the opcode to.
    /// </param>
    /// <returns>
    /// The <see cref="ILGenerator"/> passed in through <paramref name="il"/>.
    /// </returns>
    [GeneratedCode("opcodes.t4.tt", null)]
    public static ILGenerator @readonly(this ILGenerator il)
    {
        Guard.NotNull(il);
        il.Emit(OpCodes.Readonly);
        return il;
    }

    /// <summary>
    /// Emits the opcode <see cref="OpCodes.Refanytype"/>
    /// </summary>
    /// <param name="il">
    /// The <see cref="ILGenerator" /> to emit the opcode to.
    /// </param>
    /// <returns>
    /// The <see cref="ILGenerator"/> passed in through <paramref name="il"/>.
    /// </returns>
    [GeneratedCode("opcodes.t4.tt", null)]
    public static ILGenerator refanytype(this ILGenerator il)
    {
        Guard.NotNull(il);
        il.Emit(OpCodes.Refanytype);
        return il;
    }

    /// <summary>
    /// Emits the opcode <see cref="OpCodes.Refanyval"/>
    /// </summary>
    /// <param name="il">
    /// The <see cref="ILGenerator" /> to emit the opcode to.
    /// </param>
    /// <param name="value">
    /// The <see cref="Type"/> value to emit with the opcode.
    /// </param>
    /// <returns>
    /// The <see cref="ILGenerator"/> passed in through <paramref name="il"/>.
    /// </returns>
    [GeneratedCode("opcodes.t4.tt", null)]
    public static ILGenerator refanyval(this ILGenerator il, Type value)
    {
        Guard.NotNull(il);
        il.Emit(OpCodes.Refanyval, value);
        return il;
    }

    /// <summary>
    /// Emits the opcode <see cref="OpCodes.Sizeof"/>
    /// </summary>
    /// <param name="il">
    /// The <see cref="ILGenerator" /> to emit the opcode to.
    /// </param>
    /// <param name="value">
    /// The <see cref="Type"/> value to emit with the opcode.
    /// </param>
    /// <returns>
    /// The <see cref="ILGenerator"/> passed in through <paramref name="il"/>.
    /// </returns>
    [GeneratedCode("opcodes.t4.tt", null)]
    public static ILGenerator @sizeof(this ILGenerator il, Type value)
    {
        Guard.NotNull(il);
        il.Emit(OpCodes.Sizeof, value);
        return il;
    }

    /// <summary>
    /// Emits the opcode <see cref="OpCodes.Starg"/>
    /// </summary>
    /// <param name="il">
    /// The <see cref="ILGenerator" /> to emit the opcode to.
    /// </param>
    /// <param name="value">
    /// The <see cref="short"/> value to emit with the opcode.
    /// </param>
    /// <returns>
    /// The <see cref="ILGenerator"/> passed in through <paramref name="il"/>.
    /// </returns>
    [GeneratedCode("opcodes.t4.tt", null)]
    public static ILGenerator starg(this ILGenerator il, short value)
    {
        Guard.NotNull(il);
        il.Emit(OpCodes.Starg, value);
        return il;
    }

    /// <summary>
    /// Emits the opcode <see cref="OpCodes.Starg_S"/>
    /// </summary>
    /// <param name="il">
    /// The <see cref="ILGenerator" /> to emit the opcode to.
    /// </param>
    /// <param name="value">
    /// The <see cref="byte"/> value to emit with the opcode.
    /// </param>
    /// <returns>
    /// The <see cref="ILGenerator"/> passed in through <paramref name="il"/>.
    /// </returns>
    [GeneratedCode("opcodes.t4.tt", null)]
    public static ILGenerator starg_s(this ILGenerator il, byte value)
    {
        Guard.NotNull(il);
        il.Emit(OpCodes.Starg_S, value);
        return il;
    }

    /// <summary>
    /// Emits the opcode <see cref="OpCodes.Stelem"/>
    /// </summary>
    /// <param name="il">
    /// The <see cref="ILGenerator" /> to emit the opcode to.
    /// </param>
    /// <param name="value">
    /// The <see cref="Type"/> value to emit with the opcode.
    /// </param>
    /// <returns>
    /// The <see cref="ILGenerator"/> passed in through <paramref name="il"/>.
    /// </returns>
    [GeneratedCode("opcodes.t4.tt", null)]
    public static ILGenerator stelem(this ILGenerator il, Type value)
    {
        Guard.NotNull(il);
        il.Emit(OpCodes.Stelem, value);
        return il;
    }

    /// <summary>
    /// Emits the opcode <see cref="OpCodes.Stelem_I"/>
    /// </summary>
    /// <param name="il">
    /// The <see cref="ILGenerator" /> to emit the opcode to.
    /// </param>
    /// <returns>
    /// The <see cref="ILGenerator"/> passed in through <paramref name="il"/>.
    /// </returns>
    [GeneratedCode("opcodes.t4.tt", null)]
    public static ILGenerator stelem_i(this ILGenerator il)
    {
        Guard.NotNull(il);
        il.Emit(OpCodes.Stelem_I);
        return il;
    }

    /// <summary>
    /// Emits the opcode <see cref="OpCodes.Stelem_I1"/>
    /// </summary>
    /// <param name="il">
    /// The <see cref="ILGenerator" /> to emit the opcode to.
    /// </param>
    /// <returns>
    /// The <see cref="ILGenerator"/> passed in through <paramref name="il"/>.
    /// </returns>
    [GeneratedCode("opcodes.t4.tt", null)]
    public static ILGenerator stelem_i1(this ILGenerator il)
    {
        Guard.NotNull(il);
        il.Emit(OpCodes.Stelem_I1);
        return il;
    }

    /// <summary>
    /// Emits the opcode <see cref="OpCodes.Stelem_I2"/>
    /// </summary>
    /// <param name="il">
    /// The <see cref="ILGenerator" /> to emit the opcode to.
    /// </param>
    /// <returns>
    /// The <see cref="ILGenerator"/> passed in through <paramref name="il"/>.
    /// </returns>
    [GeneratedCode("opcodes.t4.tt", null)]
    public static ILGenerator stelem_i2(this ILGenerator il)
    {
        Guard.NotNull(il);
        il.Emit(OpCodes.Stelem_I2);
        return il;
    }

    /// <summary>
    /// Emits the opcode <see cref="OpCodes.Stelem_I4"/>
    /// </summary>
    /// <param name="il">
    /// The <see cref="ILGenerator" /> to emit the opcode to.
    /// </param>
    /// <returns>
    /// The <see cref="ILGenerator"/> passed in through <paramref name="il"/>.
    /// </returns>
    [GeneratedCode("opcodes.t4.tt", null)]
    public static ILGenerator stelem_i4(this ILGenerator il)
    {
        Guard.NotNull(il);
        il.Emit(OpCodes.Stelem_I4);
        return il;
    }

    /// <summary>
    /// Emits the opcode <see cref="OpCodes.Stelem_I8"/>
    /// </summary>
    /// <param name="il">
    /// The <see cref="ILGenerator" /> to emit the opcode to.
    /// </param>
    /// <returns>
    /// The <see cref="ILGenerator"/> passed in through <paramref name="il"/>.
    /// </returns>
    [GeneratedCode("opcodes.t4.tt", null)]
    public static ILGenerator stelem_i8(this ILGenerator il)
    {
        Guard.NotNull(il);
        il.Emit(OpCodes.Stelem_I8);
        return il;
    }

    /// <summary>
    /// Emits the opcode <see cref="OpCodes.Stelem_R4"/>
    /// </summary>
    /// <param name="il">
    /// The <see cref="ILGenerator" /> to emit the opcode to.
    /// </param>
    /// <returns>
    /// The <see cref="ILGenerator"/> passed in through <paramref name="il"/>.
    /// </returns>
    [GeneratedCode("opcodes.t4.tt", null)]
    public static ILGenerator stelem_r4(this ILGenerator il)
    {
        Guard.NotNull(il);
        il.Emit(OpCodes.Stelem_R4);
        return il;
    }

    /// <summary>
    /// Emits the opcode <see cref="OpCodes.Stelem_R8"/>
    /// </summary>
    /// <param name="il">
    /// The <see cref="ILGenerator" /> to emit the opcode to.
    /// </param>
    /// <returns>
    /// The <see cref="ILGenerator"/> passed in through <paramref name="il"/>.
    /// </returns>
    [GeneratedCode("opcodes.t4.tt", null)]
    public static ILGenerator stelem_r8(this ILGenerator il)
    {
        Guard.NotNull(il);
        il.Emit(OpCodes.Stelem_R8);
        return il;
    }

    /// <summary>
    /// Emits the opcode <see cref="OpCodes.Stelem_Ref"/>
    /// </summary>
    /// <param name="il">
    /// The <see cref="ILGenerator" /> to emit the opcode to.
    /// </param>
    /// <returns>
    /// The <see cref="ILGenerator"/> passed in through <paramref name="il"/>.
    /// </returns>
    [GeneratedCode("opcodes.t4.tt", null)]
    public static ILGenerator stelem_ref(this ILGenerator il)
    {
        Guard.NotNull(il);
        il.Emit(OpCodes.Stelem_Ref);
        return il;
    }

    /// <summary>
    /// Emits the opcode <see cref="OpCodes.Stfld"/>
    /// </summary>
    /// <param name="il">
    /// The <see cref="ILGenerator" /> to emit the opcode to.
    /// </param>
    /// <param name="value">
    /// The <see cref="FieldInfo"/> value to emit with the opcode.
    /// </param>
    /// <returns>
    /// The <see cref="ILGenerator"/> passed in through <paramref name="il"/>.
    /// </returns>
    [GeneratedCode("opcodes.t4.tt", null)]
    public static ILGenerator stfld(this ILGenerator il, FieldInfo value)
    {
        Guard.NotNull(il);
        il.Emit(OpCodes.Stfld, value);
        return il;
    }

    /// <summary>
    /// Emits the opcode <see cref="OpCodes.Stind_I"/>
    /// </summary>
    /// <param name="il">
    /// The <see cref="ILGenerator" /> to emit the opcode to.
    /// </param>
    /// <returns>
    /// The <see cref="ILGenerator"/> passed in through <paramref name="il"/>.
    /// </returns>
    [GeneratedCode("opcodes.t4.tt", null)]
    public static ILGenerator stind_i(this ILGenerator il)
    {
        Guard.NotNull(il);
        il.Emit(OpCodes.Stind_I);
        return il;
    }

    /// <summary>
    /// Emits the opcode <see cref="OpCodes.Stind_I1"/>
    /// </summary>
    /// <param name="il">
    /// The <see cref="ILGenerator" /> to emit the opcode to.
    /// </param>
    /// <returns>
    /// The <see cref="ILGenerator"/> passed in through <paramref name="il"/>.
    /// </returns>
    [GeneratedCode("opcodes.t4.tt", null)]
    public static ILGenerator stind_i1(this ILGenerator il)
    {
        Guard.NotNull(il);
        il.Emit(OpCodes.Stind_I1);
        return il;
    }

    /// <summary>
    /// Emits the opcode <see cref="OpCodes.Stind_I2"/>
    /// </summary>
    /// <param name="il">
    /// The <see cref="ILGenerator" /> to emit the opcode to.
    /// </param>
    /// <returns>
    /// The <see cref="ILGenerator"/> passed in through <paramref name="il"/>.
    /// </returns>
    [GeneratedCode("opcodes.t4.tt", null)]
    public static ILGenerator stind_i2(this ILGenerator il)
    {
        Guard.NotNull(il);
        il.Emit(OpCodes.Stind_I2);
        return il;
    }

    /// <summary>
    /// Emits the opcode <see cref="OpCodes.Stind_I4"/>
    /// </summary>
    /// <param name="il">
    /// The <see cref="ILGenerator" /> to emit the opcode to.
    /// </param>
    /// <returns>
    /// The <see cref="ILGenerator"/> passed in through <paramref name="il"/>.
    /// </returns>
    [GeneratedCode("opcodes.t4.tt", null)]
    public static ILGenerator stind_i4(this ILGenerator il)
    {
        Guard.NotNull(il);
        il.Emit(OpCodes.Stind_I4);
        return il;
    }

    /// <summary>
    /// Emits the opcode <see cref="OpCodes.Stind_I8"/>
    /// </summary>
    /// <param name="il">
    /// The <see cref="ILGenerator" /> to emit the opcode to.
    /// </param>
    /// <returns>
    /// The <see cref="ILGenerator"/> passed in through <paramref name="il"/>.
    /// </returns>
    [GeneratedCode("opcodes.t4.tt", null)]
    public static ILGenerator stind_i8(this ILGenerator il)
    {
        Guard.NotNull(il);
        il.Emit(OpCodes.Stind_I8);
        return il;
    }

    /// <summary>
    /// Emits the opcode <see cref="OpCodes.Stind_R4"/>
    /// </summary>
    /// <param name="il">
    /// The <see cref="ILGenerator" /> to emit the opcode to.
    /// </param>
    /// <returns>
    /// The <see cref="ILGenerator"/> passed in through <paramref name="il"/>.
    /// </returns>
    [GeneratedCode("opcodes.t4.tt", null)]
    public static ILGenerator stind_r4(this ILGenerator il)
    {
        Guard.NotNull(il);
        il.Emit(OpCodes.Stind_R4);
        return il;
    }

    /// <summary>
    /// Emits the opcode <see cref="OpCodes.Stind_R8"/>
    /// </summary>
    /// <param name="il">
    /// The <see cref="ILGenerator" /> to emit the opcode to.
    /// </param>
    /// <returns>
    /// The <see cref="ILGenerator"/> passed in through <paramref name="il"/>.
    /// </returns>
    [GeneratedCode("opcodes.t4.tt", null)]
    public static ILGenerator stind_r8(this ILGenerator il)
    {
        Guard.NotNull(il);
        il.Emit(OpCodes.Stind_R8);
        return il;
    }

    /// <summary>
    /// Emits the opcode <see cref="OpCodes.Stind_Ref"/>
    /// </summary>
    /// <param name="il">
    /// The <see cref="ILGenerator" /> to emit the opcode to.
    /// </param>
    /// <returns>
    /// The <see cref="ILGenerator"/> passed in through <paramref name="il"/>.
    /// </returns>
    [GeneratedCode("opcodes.t4.tt", null)]
    public static ILGenerator stind_ref(this ILGenerator il)
    {
        Guard.NotNull(il);
        il.Emit(OpCodes.Stind_Ref);
        return il;
    }

    /// <summary>
    /// Emits the opcode <see cref="OpCodes.Stloc"/>
    /// </summary>
    /// <param name="il">
    /// The <see cref="ILGenerator" /> to emit the opcode to.
    /// </param>
    /// <param name="value">
    /// The <see cref="short"/> value to emit with the opcode.
    /// </param>
    /// <returns>
    /// The <see cref="ILGenerator"/> passed in through <paramref name="il"/>.
    /// </returns>
    [GeneratedCode("opcodes.t4.tt", null)]
    public static ILGenerator stloc(this ILGenerator il, short value)
    {
        Guard.NotNull(il);
        il.Emit(OpCodes.Stloc, value);
        return il;
    }

    /// <summary>
    /// Emits the opcode <see cref="OpCodes.Stloc"/>
    /// </summary>
    /// <param name="il">
    /// The <see cref="ILGenerator" /> to emit the opcode to.
    /// </param>
    /// <param name="value">
    /// The <see cref="LocalBuilder"/> value to emit with the opcode.
    /// </param>
    /// <returns>
    /// The <see cref="ILGenerator"/> passed in through <paramref name="il"/>.
    /// </returns>
    [GeneratedCode("opcodes.t4.tt", null)]
    public static ILGenerator stloc(this ILGenerator il, LocalBuilder value)
    {
        Guard.NotNull(il);
        il.Emit(OpCodes.Stloc, value);
        return il;
    }

    /// <summary>
    /// Emits the opcode <see cref="OpCodes.Stloc_0"/>
    /// </summary>
    /// <param name="il">
    /// The <see cref="ILGenerator" /> to emit the opcode to.
    /// </param>
    /// <returns>
    /// The <see cref="ILGenerator"/> passed in through <paramref name="il"/>.
    /// </returns>
    [GeneratedCode("opcodes.t4.tt", null)]
    public static ILGenerator stloc_0(this ILGenerator il)
    {
        Guard.NotNull(il);
        il.Emit(OpCodes.Stloc_0);
        return il;
    }

    /// <summary>
    /// Emits the opcode <see cref="OpCodes.Stloc_1"/>
    /// </summary>
    /// <param name="il">
    /// The <see cref="ILGenerator" /> to emit the opcode to.
    /// </param>
    /// <returns>
    /// The <see cref="ILGenerator"/> passed in through <paramref name="il"/>.
    /// </returns>
    [GeneratedCode("opcodes.t4.tt", null)]
    public static ILGenerator stloc_1(this ILGenerator il)
    {
        Guard.NotNull(il);
        il.Emit(OpCodes.Stloc_1);
        return il;
    }

    /// <summary>
    /// Emits the opcode <see cref="OpCodes.Stloc_2"/>
    /// </summary>
    /// <param name="il">
    /// The <see cref="ILGenerator" /> to emit the opcode to.
    /// </param>
    /// <returns>
    /// The <see cref="ILGenerator"/> passed in through <paramref name="il"/>.
    /// </returns>
    [GeneratedCode("opcodes.t4.tt", null)]
    public static ILGenerator stloc_2(this ILGenerator il)
    {
        Guard.NotNull(il);
        il.Emit(OpCodes.Stloc_2);
        return il;
    }

    /// <summary>
    /// Emits the opcode <see cref="OpCodes.Stloc_3"/>
    /// </summary>
    /// <param name="il">
    /// The <see cref="ILGenerator" /> to emit the opcode to.
    /// </param>
    /// <returns>
    /// The <see cref="ILGenerator"/> passed in through <paramref name="il"/>.
    /// </returns>
    [GeneratedCode("opcodes.t4.tt", null)]
    public static ILGenerator stloc_3(this ILGenerator il)
    {
        Guard.NotNull(il);
        il.Emit(OpCodes.Stloc_3);
        return il;
    }

    /// <summary>
    /// Emits the opcode <see cref="OpCodes.Stloc_S"/>
    /// </summary>
    /// <param name="il">
    /// The <see cref="ILGenerator" /> to emit the opcode to.
    /// </param>
    /// <param name="value">
    /// The <see cref="byte"/> value to emit with the opcode.
    /// </param>
    /// <returns>
    /// The <see cref="ILGenerator"/> passed in through <paramref name="il"/>.
    /// </returns>
    [GeneratedCode("opcodes.t4.tt", null)]
    public static ILGenerator stloc_s(this ILGenerator il, byte value)
    {
        Guard.NotNull(il);
        il.Emit(OpCodes.Stloc_S, value);
        return il;
    }

    /// <summary>
    /// Emits the opcode <see cref="OpCodes.Stloc_S"/>
    /// </summary>
    /// <param name="il">
    /// The <see cref="ILGenerator" /> to emit the opcode to.
    /// </param>
    /// <param name="value">
    /// The <see cref="LocalBuilder"/> value to emit with the opcode.
    /// </param>
    /// <returns>
    /// The <see cref="ILGenerator"/> passed in through <paramref name="il"/>.
    /// </returns>
    [GeneratedCode("opcodes.t4.tt", null)]
    public static ILGenerator stloc_s(this ILGenerator il, LocalBuilder value)
    {
        Guard.NotNull(il);
        il.Emit(OpCodes.Stloc_S, value);
        return il;
    }

    /// <summary>
    /// Emits the opcode <see cref="OpCodes.Stobj"/>
    /// </summary>
    /// <param name="il">
    /// The <see cref="ILGenerator" /> to emit the opcode to.
    /// </param>
    /// <param name="value">
    /// The <see cref="Type"/> value to emit with the opcode.
    /// </param>
    /// <returns>
    /// The <see cref="ILGenerator"/> passed in through <paramref name="il"/>.
    /// </returns>
    [GeneratedCode("opcodes.t4.tt", null)]
    public static ILGenerator stobj(this ILGenerator il, Type value)
    {
        Guard.NotNull(il);
        il.Emit(OpCodes.Stobj, value);
        return il;
    }

    /// <summary>
    /// Emits the opcode <see cref="OpCodes.Stsfld"/>
    /// </summary>
    /// <param name="il">
    /// The <see cref="ILGenerator" /> to emit the opcode to.
    /// </param>
    /// <param name="value">
    /// The <see cref="FieldInfo"/> value to emit with the opcode.
    /// </param>
    /// <returns>
    /// The <see cref="ILGenerator"/> passed in through <paramref name="il"/>.
    /// </returns>
    [GeneratedCode("opcodes.t4.tt", null)]
    public static ILGenerator stsfld(this ILGenerator il, FieldInfo value)
    {
        Guard.NotNull(il);
        il.Emit(OpCodes.Stsfld, value);
        return il;
    }

    /// <summary>
    /// Emits the opcode <see cref="OpCodes.Tailcall"/>
    /// </summary>
    /// <param name="il">
    /// The <see cref="ILGenerator" /> to emit the opcode to.
    /// </param>
    /// <returns>
    /// The <see cref="ILGenerator"/> passed in through <paramref name="il"/>.
    /// </returns>
    [GeneratedCode("opcodes.t4.tt", null)]
    public static ILGenerator tailcall(this ILGenerator il)
    {
        Guard.NotNull(il);
        il.Emit(OpCodes.Tailcall);
        return il;
    }

    /// <summary>
    /// Emits the opcode <see cref="OpCodes.Throw"/>
    /// </summary>
    /// <param name="il">
    /// The <see cref="ILGenerator" /> to emit the opcode to.
    /// </param>
    /// <returns>
    /// The <see cref="ILGenerator"/> passed in through <paramref name="il"/>.
    /// </returns>
    [GeneratedCode("opcodes.t4.tt", null)]
    public static ILGenerator @throw(this ILGenerator il)
    {
        Guard.NotNull(il);
        il.Emit(OpCodes.Throw);
        return il;
    }

    /// <summary>
    /// Emits the opcode <see cref="OpCodes.Unaligned"/>
    /// </summary>
    /// <param name="il">
    /// The <see cref="ILGenerator" /> to emit the opcode to.
    /// </param>
    /// <param name="value">
    /// The <see cref="Label"/> value to emit with the opcode.
    /// </param>
    /// <returns>
    /// The <see cref="ILGenerator"/> passed in through <paramref name="il"/>.
    /// </returns>
    [GeneratedCode("opcodes.t4.tt", null)]
    public static ILGenerator unaligned(this ILGenerator il, Label value)
    {
        Guard.NotNull(il);
        il.Emit(OpCodes.Unaligned, value);
        return il;
    }

    /// <summary>
    /// Emits the opcode <see cref="OpCodes.Unaligned"/>
    /// </summary>
    /// <param name="il">
    /// The <see cref="ILGenerator" /> to emit the opcode to.
    /// </param>
    /// <param name="value">
    /// The <see cref="byte"/> value to emit with the opcode.
    /// </param>
    /// <returns>
    /// The <see cref="ILGenerator"/> passed in through <paramref name="il"/>.
    /// </returns>
    [GeneratedCode("opcodes.t4.tt", null)]
    public static ILGenerator unaligned(this ILGenerator il, byte value)
    {
        Guard.NotNull(il);
        il.Emit(OpCodes.Unaligned, value);
        return il;
    }

    /// <summary>
    /// Emits the opcode <see cref="OpCodes.Beq"/>
    /// </summary>
    /// <param name="il">
    /// The <see cref="ILGenerator" /> to emit the opcode to.
    /// </param>
    /// <param name="value">
    /// The <see cref="Label"/> value to emit with the opcode.
    /// </param>
    /// <returns>
    /// The <see cref="ILGenerator"/> passed in through <paramref name="il"/>.
    /// </returns>
    [GeneratedCode("opcodes.t4.tt", null)]
    public static ILGenerator beq(this ILGenerator il, Label value)
    {
        Guard.NotNull(il);
        il.Emit(OpCodes.Beq, value);
        return il;
    }

    /// <summary>
    /// Emits the opcode <see cref="OpCodes.Beq_S"/>
    /// </summary>
    /// <param name="il">
    /// The <see cref="ILGenerator" /> to emit the opcode to.
    /// </param>
    /// <param name="value">
    /// The <see cref="Label"/> value to emit with the opcode.
    /// </param>
    /// <returns>
    /// The <see cref="ILGenerator"/> passed in through <paramref name="il"/>.
    /// </returns>
    [GeneratedCode("opcodes.t4.tt", null)]
    public static ILGenerator beq_s(this ILGenerator il, Label value)
    {
        Guard.NotNull(il);
        il.Emit(OpCodes.Beq_S, value);
        return il;
    }

    /// <summary>
    /// Emits the opcode <see cref="OpCodes.Bge"/>
    /// </summary>
    /// <param name="il">
    /// The <see cref="ILGenerator" /> to emit the opcode to.
    /// </param>
    /// <param name="value">
    /// The <see cref="Label"/> value to emit with the opcode.
    /// </param>
    /// <returns>
    /// The <see cref="ILGenerator"/> passed in through <paramref name="il"/>.
    /// </returns>
    [GeneratedCode("opcodes.t4.tt", null)]
    public static ILGenerator bge(this ILGenerator il, Label value)
    {
        Guard.NotNull(il);
        il.Emit(OpCodes.Bge, value);
        return il;
    }

    /// <summary>
    /// Emits the opcode <see cref="OpCodes.Bge_S"/>
    /// </summary>
    /// <param name="il">
    /// The <see cref="ILGenerator" /> to emit the opcode to.
    /// </param>
    /// <param name="value">
    /// The <see cref="Label"/> value to emit with the opcode.
    /// </param>
    /// <returns>
    /// The <see cref="ILGenerator"/> passed in through <paramref name="il"/>.
    /// </returns>
    [GeneratedCode("opcodes.t4.tt", null)]
    public static ILGenerator bge_s(this ILGenerator il, Label value)
    {
        Guard.NotNull(il);
        il.Emit(OpCodes.Bge_S, value);
        return il;
    }

    /// <summary>
    /// Emits the opcode <see cref="OpCodes.Bge_Un"/>
    /// </summary>
    /// <param name="il">
    /// The <see cref="ILGenerator" /> to emit the opcode to.
    /// </param>
    /// <param name="value">
    /// The <see cref="Label"/> value to emit with the opcode.
    /// </param>
    /// <returns>
    /// The <see cref="ILGenerator"/> passed in through <paramref name="il"/>.
    /// </returns>
    [GeneratedCode("opcodes.t4.tt", null)]
    public static ILGenerator bge_un(this ILGenerator il, Label value)
    {
        Guard.NotNull(il);
        il.Emit(OpCodes.Bge_Un, value);
        return il;
    }

    /// <summary>
    /// Emits the opcode <see cref="OpCodes.Bge_Un_S"/>
    /// </summary>
    /// <param name="il">
    /// The <see cref="ILGenerator" /> to emit the opcode to.
    /// </param>
    /// <param name="value">
    /// The <see cref="Label"/> value to emit with the opcode.
    /// </param>
    /// <returns>
    /// The <see cref="ILGenerator"/> passed in through <paramref name="il"/>.
    /// </returns>
    [GeneratedCode("opcodes.t4.tt", null)]
    public static ILGenerator bge_un_s(this ILGenerator il, Label value)
    {
        Guard.NotNull(il);
        il.Emit(OpCodes.Bge_Un_S, value);
        return il;
    }

    /// <summary>
    /// Emits the opcode <see cref="OpCodes.Bgt"/>
    /// </summary>
    /// <param name="il">
    /// The <see cref="ILGenerator" /> to emit the opcode to.
    /// </param>
    /// <param name="value">
    /// The <see cref="Label"/> value to emit with the opcode.
    /// </param>
    /// <returns>
    /// The <see cref="ILGenerator"/> passed in through <paramref name="il"/>.
    /// </returns>
    [GeneratedCode("opcodes.t4.tt", null)]
    public static ILGenerator bgt(this ILGenerator il, Label value)
    {
        Guard.NotNull(il);
        il.Emit(OpCodes.Bgt, value);
        return il;
    }

    /// <summary>
    /// Emits the opcode <see cref="OpCodes.Bgt_S"/>
    /// </summary>
    /// <param name="il">
    /// The <see cref="ILGenerator" /> to emit the opcode to.
    /// </param>
    /// <param name="value">
    /// The <see cref="Label"/> value to emit with the opcode.
    /// </param>
    /// <returns>
    /// The <see cref="ILGenerator"/> passed in through <paramref name="il"/>.
    /// </returns>
    [GeneratedCode("opcodes.t4.tt", null)]
    public static ILGenerator bgt_s(this ILGenerator il, Label value)
    {
        Guard.NotNull(il);
        il.Emit(OpCodes.Bgt_S, value);
        return il;
    }

    /// <summary>
    /// Emits the opcode <see cref="OpCodes.Bgt_Un"/>
    /// </summary>
    /// <param name="il">
    /// The <see cref="ILGenerator" /> to emit the opcode to.
    /// </param>
    /// <param name="value">
    /// The <see cref="Label"/> value to emit with the opcode.
    /// </param>
    /// <returns>
    /// The <see cref="ILGenerator"/> passed in through <paramref name="il"/>.
    /// </returns>
    [GeneratedCode("opcodes.t4.tt", null)]
    public static ILGenerator bgt_un(this ILGenerator il, Label value)
    {
        Guard.NotNull(il);
        il.Emit(OpCodes.Bgt_Un, value);
        return il;
    }

    /// <summary>
    /// Emits the opcode <see cref="OpCodes.Bgt_Un_S"/>
    /// </summary>
    /// <param name="il">
    /// The <see cref="ILGenerator" /> to emit the opcode to.
    /// </param>
    /// <param name="value">
    /// The <see cref="Label"/> value to emit with the opcode.
    /// </param>
    /// <returns>
    /// The <see cref="ILGenerator"/> passed in through <paramref name="il"/>.
    /// </returns>
    [GeneratedCode("opcodes.t4.tt", null)]
    public static ILGenerator bgt_un_s(this ILGenerator il, Label value)
    {
        Guard.NotNull(il);
        il.Emit(OpCodes.Bgt_Un_S, value);
        return il;
    }

    /// <summary>
    /// Emits the opcode <see cref="OpCodes.Ble"/>
    /// </summary>
    /// <param name="il">
    /// The <see cref="ILGenerator" /> to emit the opcode to.
    /// </param>
    /// <param name="value">
    /// The <see cref="Label"/> value to emit with the opcode.
    /// </param>
    /// <returns>
    /// The <see cref="ILGenerator"/> passed in through <paramref name="il"/>.
    /// </returns>
    [GeneratedCode("opcodes.t4.tt", null)]
    public static ILGenerator ble(this ILGenerator il, Label value)
    {
        Guard.NotNull(il);
        il.Emit(OpCodes.Ble, value);
        return il;
    }

    /// <summary>
    /// Emits the opcode <see cref="OpCodes.Ble_S"/>
    /// </summary>
    /// <param name="il">
    /// The <see cref="ILGenerator" /> to emit the opcode to.
    /// </param>
    /// <param name="value">
    /// The <see cref="Label"/> value to emit with the opcode.
    /// </param>
    /// <returns>
    /// The <see cref="ILGenerator"/> passed in through <paramref name="il"/>.
    /// </returns>
    [GeneratedCode("opcodes.t4.tt", null)]
    public static ILGenerator ble_s(this ILGenerator il, Label value)
    {
        Guard.NotNull(il);
        il.Emit(OpCodes.Ble_S, value);
        return il;
    }

    /// <summary>
    /// Emits the opcode <see cref="OpCodes.Ble_Un"/>
    /// </summary>
    /// <param name="il">
    /// The <see cref="ILGenerator" /> to emit the opcode to.
    /// </param>
    /// <param name="value">
    /// The <see cref="Label"/> value to emit with the opcode.
    /// </param>
    /// <returns>
    /// The <see cref="ILGenerator"/> passed in through <paramref name="il"/>.
    /// </returns>
    [GeneratedCode("opcodes.t4.tt", null)]
    public static ILGenerator ble_un(this ILGenerator il, Label value)
    {
        Guard.NotNull(il);
        il.Emit(OpCodes.Ble_Un, value);
        return il;
    }

    /// <summary>
    /// Emits the opcode <see cref="OpCodes.Ble_Un_S"/>
    /// </summary>
    /// <param name="il">
    /// The <see cref="ILGenerator" /> to emit the opcode to.
    /// </param>
    /// <param name="value">
    /// The <see cref="Label"/> value to emit with the opcode.
    /// </param>
    /// <returns>
    /// The <see cref="ILGenerator"/> passed in through <paramref name="il"/>.
    /// </returns>
    [GeneratedCode("opcodes.t4.tt", null)]
    public static ILGenerator ble_un_s(this ILGenerator il, Label value)
    {
        Guard.NotNull(il);
        il.Emit(OpCodes.Ble_Un_S, value);
        return il;
    }

    /// <summary>
    /// Emits the opcode <see cref="OpCodes.Blt"/>
    /// </summary>
    /// <param name="il">
    /// The <see cref="ILGenerator" /> to emit the opcode to.
    /// </param>
    /// <param name="value">
    /// The <see cref="Label"/> value to emit with the opcode.
    /// </param>
    /// <returns>
    /// The <see cref="ILGenerator"/> passed in through <paramref name="il"/>.
    /// </returns>
    [GeneratedCode("opcodes.t4.tt", null)]
    public static ILGenerator blt(this ILGenerator il, Label value)
    {
        Guard.NotNull(il);
        il.Emit(OpCodes.Blt, value);
        return il;
    }

    /// <summary>
    /// Emits the opcode <see cref="OpCodes.Blt_S"/>
    /// </summary>
    /// <param name="il">
    /// The <see cref="ILGenerator" /> to emit the opcode to.
    /// </param>
    /// <param name="value">
    /// The <see cref="Label"/> value to emit with the opcode.
    /// </param>
    /// <returns>
    /// The <see cref="ILGenerator"/> passed in through <paramref name="il"/>.
    /// </returns>
    [GeneratedCode("opcodes.t4.tt", null)]
    public static ILGenerator blt_s(this ILGenerator il, Label value)
    {
        Guard.NotNull(il);
        il.Emit(OpCodes.Blt_S, value);
        return il;
    }

    /// <summary>
    /// Emits the opcode <see cref="OpCodes.Blt_Un"/>
    /// </summary>
    /// <param name="il">
    /// The <see cref="ILGenerator" /> to emit the opcode to.
    /// </param>
    /// <param name="value">
    /// The <see cref="Label"/> value to emit with the opcode.
    /// </param>
    /// <returns>
    /// The <see cref="ILGenerator"/> passed in through <paramref name="il"/>.
    /// </returns>
    [GeneratedCode("opcodes.t4.tt", null)]
    public static ILGenerator blt_un(this ILGenerator il, Label value)
    {
        Guard.NotNull(il);
        il.Emit(OpCodes.Blt_Un, value);
        return il;
    }

    /// <summary>
    /// Emits the opcode <see cref="OpCodes.Blt_Un_S"/>
    /// </summary>
    /// <param name="il">
    /// The <see cref="ILGenerator" /> to emit the opcode to.
    /// </param>
    /// <param name="value">
    /// The <see cref="Label"/> value to emit with the opcode.
    /// </param>
    /// <returns>
    /// The <see cref="ILGenerator"/> passed in through <paramref name="il"/>.
    /// </returns>
    [GeneratedCode("opcodes.t4.tt", null)]
    public static ILGenerator blt_un_s(this ILGenerator il, Label value)
    {
        Guard.NotNull(il);
        il.Emit(OpCodes.Blt_Un_S, value);
        return il;
    }

    /// <summary>
    /// Emits the opcode <see cref="OpCodes.Bne_Un"/>
    /// </summary>
    /// <param name="il">
    /// The <see cref="ILGenerator" /> to emit the opcode to.
    /// </param>
    /// <param name="value">
    /// The <see cref="Label"/> value to emit with the opcode.
    /// </param>
    /// <returns>
    /// The <see cref="ILGenerator"/> passed in through <paramref name="il"/>.
    /// </returns>
    [GeneratedCode("opcodes.t4.tt", null)]
    public static ILGenerator bne_un(this ILGenerator il, Label value)
    {
        Guard.NotNull(il);
        il.Emit(OpCodes.Bne_Un, value);
        return il;
    }

    /// <summary>
    /// Emits the opcode <see cref="OpCodes.Bne_Un_S"/>
    /// </summary>
    /// <param name="il">
    /// The <see cref="ILGenerator" /> to emit the opcode to.
    /// </param>
    /// <param name="value">
    /// The <see cref="Label"/> value to emit with the opcode.
    /// </param>
    /// <returns>
    /// The <see cref="ILGenerator"/> passed in through <paramref name="il"/>.
    /// </returns>
    [GeneratedCode("opcodes.t4.tt", null)]
    public static ILGenerator bne_un_s(this ILGenerator il, Label value)
    {
        Guard.NotNull(il);
        il.Emit(OpCodes.Bne_Un_S, value);
        return il;
    }

    /// <summary>
    /// Emits the opcode <see cref="OpCodes.Br"/>
    /// </summary>
    /// <param name="il">
    /// The <see cref="ILGenerator" /> to emit the opcode to.
    /// </param>
    /// <param name="value">
    /// The <see cref="Label"/> value to emit with the opcode.
    /// </param>
    /// <returns>
    /// The <see cref="ILGenerator"/> passed in through <paramref name="il"/>.
    /// </returns>
    [GeneratedCode("opcodes.t4.tt", null)]
    public static ILGenerator br(this ILGenerator il, Label value)
    {
        Guard.NotNull(il);
        il.Emit(OpCodes.Br, value);
        return il;
    }

    /// <summary>
    /// Emits the opcode <see cref="OpCodes.Br_S"/>
    /// </summary>
    /// <param name="il">
    /// The <see cref="ILGenerator" /> to emit the opcode to.
    /// </param>
    /// <param name="value">
    /// The <see cref="Label"/> value to emit with the opcode.
    /// </param>
    /// <returns>
    /// The <see cref="ILGenerator"/> passed in through <paramref name="il"/>.
    /// </returns>
    [GeneratedCode("opcodes.t4.tt", null)]
    public static ILGenerator br_s(this ILGenerator il, Label value)
    {
        Guard.NotNull(il);
        il.Emit(OpCodes.Br_S, value);
        return il;
    }

    /// <summary>
    /// Emits the opcode <see cref="OpCodes.Brfalse"/>
    /// </summary>
    /// <param name="il">
    /// The <see cref="ILGenerator" /> to emit the opcode to.
    /// </param>
    /// <param name="value">
    /// The <see cref="Label"/> value to emit with the opcode.
    /// </param>
    /// <returns>
    /// The <see cref="ILGenerator"/> passed in through <paramref name="il"/>.
    /// </returns>
    [GeneratedCode("opcodes.t4.tt", null)]
    public static ILGenerator brfalse(this ILGenerator il, Label value)
    {
        Guard.NotNull(il);
        il.Emit(OpCodes.Brfalse, value);
        return il;
    }

    /// <summary>
    /// Emits the opcode <see cref="OpCodes.Brfalse_S"/>
    /// </summary>
    /// <param name="il">
    /// The <see cref="ILGenerator" /> to emit the opcode to.
    /// </param>
    /// <param name="value">
    /// The <see cref="Label"/> value to emit with the opcode.
    /// </param>
    /// <returns>
    /// The <see cref="ILGenerator"/> passed in through <paramref name="il"/>.
    /// </returns>
    [GeneratedCode("opcodes.t4.tt", null)]
    public static ILGenerator brfalse_s(this ILGenerator il, Label value)
    {
        Guard.NotNull(il);
        il.Emit(OpCodes.Brfalse_S, value);
        return il;
    }

    /// <summary>
    /// Emits the opcode <see cref="OpCodes.Brtrue"/>
    /// </summary>
    /// <param name="il">
    /// The <see cref="ILGenerator" /> to emit the opcode to.
    /// </param>
    /// <param name="value">
    /// The <see cref="Label"/> value to emit with the opcode.
    /// </param>
    /// <returns>
    /// The <see cref="ILGenerator"/> passed in through <paramref name="il"/>.
    /// </returns>
    [GeneratedCode("opcodes.t4.tt", null)]
    public static ILGenerator brtrue(this ILGenerator il, Label value)
    {
        Guard.NotNull(il);
        il.Emit(OpCodes.Brtrue, value);
        return il;
    }

    /// <summary>
    /// Emits the opcode <see cref="OpCodes.Brtrue_S"/>
    /// </summary>
    /// <param name="il">
    /// The <see cref="ILGenerator" /> to emit the opcode to.
    /// </param>
    /// <param name="value">
    /// The <see cref="Label"/> value to emit with the opcode.
    /// </param>
    /// <returns>
    /// The <see cref="ILGenerator"/> passed in through <paramref name="il"/>.
    /// </returns>
    [GeneratedCode("opcodes.t4.tt", null)]
    public static ILGenerator brtrue_s(this ILGenerator il, Label value)
    {
        Guard.NotNull(il);
        il.Emit(OpCodes.Brtrue_S, value);
        return il;
    }
}